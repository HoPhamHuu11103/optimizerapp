
import streamlit as st
import pandas as pd
import numpy as np
from vnstock import Vnstock
from scipy.optimize import minimize
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import plotly.figure_factory as ff
import random
import streamlit as st
import pandas as pd
import datetime
import threading
# H√†m t·∫°o m√†u ng·∫´u nhi√™n
def random_color():
    return "#%06x" % random.randint(0, 0xFFFFFF)


# C·∫•u h√¨nh trang v·ªõi sidebar m·ªü r·ªông
st.set_page_config(
    page_title="Portfolio Optimization Dashboard üìà", 
    layout="wide", 
    initial_sidebar_state="expanded"
)

# Th√™m CSS t√πy ch·ªânh v·ªõi Google Font (Poppins), background gradient, hi·ªáu ·ª©ng hi·ªán ƒë·∫°i cho c√°c th√†nh ph·∫ßn
st.markdown(
    """
    <style>
    /* Import Google Font */
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');
    
    /* T·ªïng th·ªÉ background v·ªõi gradient m·ªÅm m·∫°i */
    body {
        background: linear-gradient(135deg, #f6f9fc, #e9eff5);
        font-family: 'Poppins', sans-serif;
    }
    
    /* Header ch√≠nh */
    .main-header {
        font-size: 3rem;
        font-weight: 700;
        color: #333333;
        text-align: center;
        padding: 1.5rem 0;
        text-shadow: 1px 1px 3px rgba(0,0,0,0.1);
        position: relative;
    }
    
    /* Sub-header */
    .sub-header {
        font-size: 1.25rem;
        color: #555555;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    /* Style cho c√°c tab */
    .stTabs [data-baseweb="tab"] {
        font-size: 1.1rem;
        font-weight: 600;
        color: #333333;
        border-radius: 8px;
        transition: transform 0.3s ease, background-color 0.3s ease, color 0.3s ease;
        padding: 0.5rem 1rem;
    }
    /* Hover cho tab: scale nh·∫π, n·ªÅn chuy·ªÉn sang m√†u pastel ƒë·ªè nh·∫°t v√† ch·ªØ chuy·ªÉn th√†nh m√†u ƒë·ªè ƒë·∫≠m */
    .stTabs [data-baseweb="tab"]:hover {
        transform: scale(1.05);
        background-color: #ffebee;
        color: #d32f2f;
    }
    /* Tab ƒëang active */
    .stTabs [data-baseweb="tab"] > div[role="button"][aria-selected="true"] {
        background-color: #d32f2f !important;
        color: #ffffff !important;
        border-radius: 8px;
    }
    
    /* C·∫£i ti·∫øn cho sidebar (n·∫øu c√≥) */
    .css-1d391kg {  
        background-color: #ffffff;
        border-right: 1px solid #e0e0e0;
    }
    
    /* Th√™m padding cho container ch√≠nh */
    .block-container {
        padding-top: 2rem;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Header ch√≠nh (ƒë√£ b·ªè d√≤ng ch√®n sticker)
st.markdown(
    """
    <div class="main-header">
        Portfolio Optimization Dashboard
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown(
    '<div class="sub-header">·ª®ng d·ª•ng t√≠ch h·ª£p quy tr√¨nh: t·∫£i d·ªØ li·ªáu c·ªï phi·∫øu, x·ª≠ l√Ω, t·ªëi ∆∞u h√≥a danh m·ª•c ƒë·∫ßu t∆∞ (SLSQP, SGD, SGD - Sharpe), so s√°nh v·ªõi VN-Index v√† tr·ª±c quan h√≥a d·ªØ li·ªáu.</div>',
    unsafe_allow_html=True
)

# T·∫°o c√°c tab ngang cho c√°c trang v·ªõi t√™n ƒë∆∞·ª£c t√πy ch·ªânh
tab_names = [
    "T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu",
    "T·ªëi ∆∞u danh m·ª•c (SLSQP)",
    "T·ªëi ∆∞u danh m·ª•c (SGD-Volatility)",
    "T·ªëi ∆∞u danh m·ª•c (SGD - Sharpe)",
    "Tr·ª±c quan h√≥a d·ªØ li·ªáu",
    "Th√¥ng tin c√¥ng ty",
    "B√°o c√°o t√†i ch√≠nh",
    "Ph√¢n t√≠ch k·ªπ thu·∫≠t",
    "B·∫£ng gi√° giao d·ªãch"
]
tabs = st.tabs(tab_names)
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9 = tabs
###########################################
# Tab 1: T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu
###########################################
with tab1:
    st.header("Nh·∫≠p m√£ c·ªï phi·∫øu v√† t·∫£i d·ªØ li·ªáu")
    st.write("Nh·∫≠p c√°c m√£ c·ªï phi·∫øu (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y, v√≠ d·ª•: ACB, VCB):")
    symbols_input = st.text_input("M√£ c·ªï phi·∫øu")
    
    # Th√™m tr∆∞·ªùng nh·∫≠p s·ªë ti·ªÅn ƒë·∫ßu t∆∞
    investment_amount = st.number_input("Nh·∫≠p s·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND):", min_value=0.0, step=1000000.0, format="%.0f")
    
    if st.button("T·∫£i d·ªØ li·ªáu"):
        symbols = [s.strip().upper() for s in symbols_input.split(",") if s.strip()]
        if not symbols:
            st.error("Danh s√°ch m√£ c·ªï phi·∫øu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
        else:
            # L∆∞u symbols v√† investment_amount v√†o session state
            st.session_state['symbols'] = symbols
            st.session_state['investment_amount'] = investment_amount
            all_data = []
            for symbol in symbols:
                try:
                    stock = Vnstock().stock(symbol=symbol, source='VCI')
                    historical_data = stock.quote.history(start='2020-01-01', end='2024-12-31')
                    if historical_data.empty:
                        st.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£: {symbol}")
                        continue
                    historical_data['symbol'] = symbol
                    all_data.append(historical_data)
                    st.success(f"ƒê√£ t·∫£i d·ªØ li·ªáu cho: {symbol}")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu cho {symbol}: {e}")
            if all_data:
                final_data = pd.concat(all_data, ignore_index=True)
                st.write("ƒê√£ k·∫øt h·ª£p to√†n b·ªô d·ªØ li·ªáu th√†nh c√¥ng!")
                
                def calculate_features(data):
                    data['daily_return'] = data['close'].pct_change()
                    data['volatility'] = data['daily_return'].rolling(window=30).std()
                    data.dropna(inplace=True)
                    return data
                
                processed_data = final_data.groupby('symbol').apply(calculate_features)
                processed_data = processed_data.reset_index(drop=True)
                processed_data.to_csv("processed_stock_data.csv", index=False)
                st.success("D·ªØ li·ªáu x·ª≠ l√Ω ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file 'processed_stock_data.csv'.")
                st.dataframe(processed_data)
            else:
                st.error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω!")

###########################################
# Tab 2: T·ªëi ∆∞u danh m·ª•c (SLSQP)
###########################################
with tab2:
    st.header("T·ªëi ∆∞u danh m·ª•c (SLSQP)")
    try:
        processed_data = pd.read_csv("processed_stock_data.csv")
        processed_data['time'] = pd.to_datetime(processed_data['time'])
        st.success("ƒê√£ t·∫£i d·ªØ li·ªáu x·ª≠ l√Ω th√†nh c√¥ng.")
    except FileNotFoundError:
        st.error("File 'processed_stock_data.csv' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫£i d·ªØ li·ªáu ·ªü tab 'T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu' tr∆∞·ªõc.")
        st.stop()
    
    # T√≠nh to√°n k·ª≥ v·ªçng l·ª£i nhu·∫≠n v√† ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai
    expected_returns = processed_data.groupby('symbol')['daily_return'].mean()
    pivot_returns = processed_data.pivot(index='time', columns='symbol', values='daily_return')
    cov_matrix = pivot_returns.cov()
    
    def objective(weights, expected_returns, cov_matrix):
        return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
    
    constraints = ({'type': 'eq', 'fun': lambda w: np.sum(w) - 1})
    bounds = tuple((0, 1) for _ in range(len(expected_returns)))
    total_expected_return = expected_returns.sum()
    init_weights = expected_returns / total_expected_return
    result = minimize(objective, init_weights, args=(expected_returns, cov_matrix),
                      method='SLSQP', bounds=bounds, constraints=constraints)
    optimal_weights_slsqp = result.x

    # L·∫•y s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ª´ session state
    investment_amount = st.session_state.get('investment_amount', 0)
    
    st.subheader("Tr·ªçng s·ªë v√† s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ªëi ∆∞u (SLSQP)")
    # T·∫°o DataFrame ch·ª©a k·∫øt qu·∫£
    results_slsqp = pd.DataFrame({
        'C·ªï phi·∫øu': expected_returns.index,
        'Tr·ªçng s·ªë t·ªëi ∆∞u': optimal_weights_slsqp,
        'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)': optimal_weights_slsqp * investment_amount
    })
    # ƒê·ªãnh d·∫°ng c·ªôt 'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)' v·ªõi d·∫•u ph·∫©y v√† ƒë∆°n v·ªã VND
    results_slsqp['S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)'] = results_slsqp['S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)'].apply(lambda x: f"{x:,.0f} VND")
    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(results_slsqp)
    
    # Bi·ªÉu ƒë·ªì tr·ª±c quan: Pie & Bar
    portfolio_data_slsqp = pd.DataFrame({
        'C·ªï phi·∫øu': expected_returns.index,
        'Tr·ªçng s·ªë t·ªëi ∆∞u': optimal_weights_slsqp,
        'S·ªë ti·ªÅn ƒë·∫ßu t∆∞': optimal_weights_slsqp * investment_amount
    })
    portfolio_data_filtered = portfolio_data_slsqp[portfolio_data_slsqp['Tr·ªçng s·ªë t·ªëi ∆∞u'] > 0]

    fig_slsqp = make_subplots(
        rows=1, cols=2,
        subplot_titles=['Tr·ªçng s·ªë t·ªëi ∆∞u (Pie)', 'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (Bar)'],
        specs=[[{'type': 'pie'}, {'type': 'bar'}]]
    )

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc
    fig_slsqp.add_trace(
        go.Pie(
            labels=portfolio_data_filtered['C·ªï phi·∫øu'],
            values=portfolio_data_filtered['Tr·ªçng s·ªë t·ªëi ∆∞u'],
            hole=0.3,
            textinfo='percent+label',
            textfont_size=14,
            marker=dict(
                colors=[random_color() for _ in range(len(portfolio_data_filtered))],
                line=dict(color='#000000', width=2)
            ),
            hoverinfo='label+percent'
        ),
        row=1, col=1
    )

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt v·ªõi d·ªØ li·ªáu s·ªë ti·ªÅn ƒë·∫ßu t∆∞
    fig_slsqp.add_trace(
        go.Bar(
            x=portfolio_data_filtered['C·ªï phi·∫øu'],
            y=portfolio_data_filtered['S·ªë ti·ªÅn ƒë·∫ßu t∆∞'],
            marker=dict(
                color=[random_color() for _ in range(len(portfolio_data_filtered))],
                line=dict(color='#000000', width=2)
            ),
            showlegend=False  # ·∫®n legend c·ªßa bi·ªÉu ƒë·ªì c·ªôt
        ),
        row=1, col=2
    )

    fig_slsqp.update_layout(
        title="So s√°nh tr·ªçng s·ªë v√† s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ªëi ∆∞u (SLSQP)",
        title_x=0.5,
        height=500,
        width=1000,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        showlegend=True
    )

    st.plotly_chart(fig_slsqp, use_container_width=True)
    
    # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa danh m·ª•c (SLSQP)
    processed_data['weighted_return_slsqp'] = processed_data['daily_return'] * processed_data['symbol'].map(
        dict(zip(expected_returns.index, optimal_weights_slsqp))
    )
    portfolio_daily_return_slsqp = processed_data.groupby('time')['weighted_return_slsqp'].sum().reset_index()
    portfolio_daily_return_slsqp.rename(columns={'weighted_return_slsqp': 'daily_return'}, inplace=True)
    # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y v√† chuy·ªÉn sang % (v√≠ d·ª•: 125% thay v√¨ 1.25)
    portfolio_daily_return_slsqp['cumulative_portfolio_return'] = (1 + portfolio_daily_return_slsqp['daily_return']).cumprod() * 100

    # S·ª≠ d·ª•ng Plotly ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v·ªõi k√Ω hi·ªáu %
    fig_portfolio = go.Figure()
    fig_portfolio.add_trace(go.Scatter(
        x=portfolio_daily_return_slsqp['time'],
        y=portfolio_daily_return_slsqp['cumulative_portfolio_return'],
        mode='lines',
        name='L·ª£i nhu·∫≠n t√≠ch l≈©y',
        hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n t√≠ch l≈©y: %{y:.2f}%<extra></extra>'
    ))
    fig_portfolio.update_layout(
        title="L·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa danh m·ª•c (SLSQP)",
        xaxis_title="Th·ªùi gian",
        yaxis_title="L·ª£i nhu·∫≠n t√≠ch l≈©y (%)",
        template="plotly_white"
    )
    # Th√™m k√Ω hi·ªáu % v√†o nh√£n c·ªßa tr·ª•c Y
    fig_portfolio.update_yaxes(ticksuffix="%")
    st.plotly_chart(fig_portfolio, use_container_width=True)

    # So s√°nh v·ªõi VN-Index
    with st.expander("So s√°nh v·ªõi VN-Index"):
        try:
            vnindex_data = pd.read_csv("vnindex_data.csv")
            vnindex_data['time'] = pd.to_datetime(vnindex_data['time'])
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu VN-Index t·ª´ file 'vnindex_data.csv'.")
        except:
            st.warning("Kh√¥ng t√¨m th·∫•y file 'vnindex_data.csv'. ƒêang t·∫£i d·ªØ li·ªáu VN-Index...")
            try:
                stock = Vnstock().stock(symbol='VNINDEX', source='VCI')
                vnindex_data = stock.quote.history(start='2020-01-01', end='2024-12-31')
                vnindex_data['time'] = pd.to_datetime(vnindex_data['time'])
                vnindex_data.to_csv("vnindex_data.csv", index=False)
                st.success("ƒê√£ l∆∞u d·ªØ li·ªáu VN-Index v√†o file 'vnindex_data.csv'.")
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu VN-Index: {e}")
                st.stop()
        
        vnindex_data['market_return'] = vnindex_data['close'].pct_change()
        # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa VN-Index v√† chuy·ªÉn sang %
        vnindex_data['cumulative_daily_return'] = (1 + vnindex_data['market_return']).cumprod() * 100
        
        comparison_slsqp = pd.merge(
            portfolio_daily_return_slsqp,
            vnindex_data[['time', 'cumulative_daily_return']],
            on='time',
            how='inner'
        )
        # ƒê·ªïi t√™n c·ªôt ƒë·ªÉ th·ªÉ hi·ªán ƒë∆°n v·ªã %
        comparison_slsqp.rename(columns={
            'cumulative_portfolio_return': 'L·ª£i nhu·∫≠n danh m·ª•c (SLSQP) (%)',
            'cumulative_daily_return': 'L·ª£i nhu·∫≠n VN-Index (%)'
        }, inplace=True)
        
        st.subheader("B·∫£ng so s√°nh l·ª£i nhu·∫≠n (10 d√≤ng cu·ªëi)")
        st.dataframe(comparison_slsqp[['time', 'L·ª£i nhu·∫≠n danh m·ª•c (SLSQP) (%)', 'L·ª£i nhu·∫≠n VN-Index (%)']].tail(10))
        
        fig_comp_slsqp = go.Figure()
        fig_comp_slsqp.add_trace(go.Scatter(
            x=comparison_slsqp['time'],
            y=comparison_slsqp['L·ª£i nhu·∫≠n danh m·ª•c (SLSQP) (%)'],
            mode='lines',
            name='L·ª£i nhu·∫≠n danh m·ª•c (SLSQP)',
            line=dict(color='blue', width=2),
            hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n danh m·ª•c (SLSQP): %{y:.2f}%<extra></extra>'
        ))
        fig_comp_slsqp.add_trace(go.Scatter(
            x=comparison_slsqp['time'],
            y=comparison_slsqp['L·ª£i nhu·∫≠n VN-Index (%)'],
            mode='lines',
            name='L·ª£i nhu·∫≠n VN-Index',
            line=dict(color='red', width=2),
            hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n VN-Index: %{y:.2f}%<extra></extra>'
        ))
        fig_comp_slsqp.update_layout(
            title="So s√°nh l·ª£i nhu·∫≠n danh m·ª•c (SLSQP) vs VN-Index",
            xaxis_title="Th·ªùi gian",
            yaxis_title="L·ª£i nhu·∫≠n t√≠ch l≈©y (%)",
            template="plotly_white"
        )
        # Th√™m k√Ω hi·ªáu % v√†o nh√£n c·ªßa tr·ª•c Y
        fig_comp_slsqp.update_yaxes(ticksuffix="%")
        st.plotly_chart(fig_comp_slsqp, use_container_width=True)
        
        comparison_slsqp.to_csv("portfolio_vs_vnindex_comparison_slsqp.csv", index=False)
        st.write("D·ªØ li·ªáu so s√°nh ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o 'portfolio_vs_vnindex_comparison_slsqp.csv'.")

###########################################
# Tab 3: T·ªëi ∆∞u danh m·ª•c (SGD-Volatility)
###########################################
with tab3:
    st.header("T·ªëi ∆∞u danh m·ª•c (SGD-Volatility)")
    try:
        processed_data = pd.read_csv("processed_stock_data.csv")
        processed_data['time'] = pd.to_datetime(processed_data['time'])
        st.success("ƒê√£ t·∫£i d·ªØ li·ªáu x·ª≠ l√Ω t·ª´ file 'processed_stock_data.csv'.")
    except Exception:
        st.error("Kh√¥ng t√¨m th·∫•y file 'processed_stock_data.csv'. Vui l√≤ng t·∫£i d·ªØ li·ªáu ·ªü tab 'T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu'.")
        st.stop()
    
    expected_returns = processed_data.groupby('symbol')['daily_return'].mean()
    pivot_returns = processed_data.pivot(index='time', columns='symbol', values='daily_return')
    cov_matrix = pivot_returns.cov()
    
    def portfolio_volatility(weights, cov_matrix):
        return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
    
    def return_based_weights(expected_returns):
        return expected_returns / expected_returns.sum()
    
    # Th√™m h√†m chi·∫øu tr·ªçng s·ªë l√™n simplex ƒë·ªÉ ƒë·∫£m b·∫£o t·ªïng tr·ªçng s·ªë = 1 v√† c√°c tr·ªçng s·ªë kh√¥ng √¢m
    def project_simplex(v, s=1):
        v = np.maximum(v, 0)
        total = np.sum(v)
        return v / total * s if total != 0 else v
    
    def sgd_optimization(expected_returns, cov_matrix, learning_rate=0.01, epochs=1000):
        weights = return_based_weights(expected_returns)
        for epoch in range(epochs):
            grad = np.dot(cov_matrix, weights) / portfolio_volatility(weights, cov_matrix)
            weights -= learning_rate * grad
            # S·ª≠ d·ª•ng project_simplex ƒë·ªÉ ƒë·∫£m b·∫£o r√†ng bu·ªôc
            weights = project_simplex(weights)
        return weights
    
    optimal_weights_sgd = sgd_optimization(expected_returns, cov_matrix, learning_rate=0.01, epochs=1000)
    
    # L·∫•y s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ª´ session state
    investment_amount = st.session_state.get('investment_amount', 0)
    
    st.subheader("Tr·ªçng s·ªë v√† s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ªëi ∆∞u (SGD-Volatility)")
    # T·∫°o DataFrame ch·ª©a k·∫øt qu·∫£
    results_sgd = pd.DataFrame({
        'C·ªï phi·∫øu': expected_returns.index,
        'Tr·ªçng s·ªë t·ªëi ∆∞u': optimal_weights_sgd,
        'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)': optimal_weights_sgd * investment_amount
    })
    # ƒê·ªãnh d·∫°ng c·ªôt 'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)' v·ªõi d·∫•u ph·∫©y v√† ƒë∆°n v·ªã VND
    results_sgd['S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)'] = results_sgd['S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)'].apply(lambda x: f"{x:,.0f} VND")
    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(results_sgd)
    
    # Bi·ªÉu ƒë·ªì tr·ª±c quan: Pie & Bar
    portfolio_data_sgd = pd.DataFrame({
        'C·ªï phi·∫øu': expected_returns.index,
        'Tr·ªçng s·ªë t·ªëi ∆∞u': optimal_weights_sgd,
        'S·ªë ti·ªÅn ƒë·∫ßu t∆∞': optimal_weights_sgd * investment_amount
    })
    portfolio_data_filtered = portfolio_data_sgd[portfolio_data_sgd['Tr·ªçng s·ªë t·ªëi ∆∞u'] > 0]

    fig_sgd = make_subplots(
        rows=1, cols=2,
        subplot_titles=['Tr·ªçng s·ªë t·ªëi ∆∞u (Pie)', 'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (Bar)'],
        specs=[[{'type': 'pie'}, {'type': 'bar'}]]
    )

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc
    fig_sgd.add_trace(
        go.Pie(
            labels=portfolio_data_filtered['C·ªï phi·∫øu'],
            values=portfolio_data_filtered['Tr·ªçng s·ªë t·ªëi ∆∞u'],
            hole=0.3,
            textinfo='percent+label',
            textfont_size=14,
            marker=dict(
                colors=[random_color() for _ in range(len(portfolio_data_filtered))],
                line=dict(color='#000000', width=2)
            ),
            hoverinfo='label+percent'
        ),
        row=1, col=1
    )

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt v·ªõi d·ªØ li·ªáu s·ªë ti·ªÅn ƒë·∫ßu t∆∞
    fig_sgd.add_trace(
        go.Bar(
            x=portfolio_data_filtered['C·ªï phi·∫øu'],
            y=portfolio_data_filtered['S·ªë ti·ªÅn ƒë·∫ßu t∆∞'],
            marker=dict(
                color=[random_color() for _ in range(len(portfolio_data_filtered))],
                line=dict(color='#000000', width=2)
            ),
            showlegend=False  # ·∫®n legend c·ªßa bi·ªÉu ƒë·ªì c·ªôt
        ),
        row=1, col=2
    )

    fig_sgd.update_layout(
        title="So s√°nh tr·ªçng s·ªë v√† s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ªëi ∆∞u (SGD-Volatility)",
        title_x=0.5,
        height=500,
        width=1000,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        showlegend=True
    )
    st.plotly_chart(fig_sgd, use_container_width=True)
    
    # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa danh m·ª•c (SGD-Volatility)
    processed_data['weighted_return_sgd'] = processed_data['daily_return'] * processed_data['symbol'].map(
        dict(zip(expected_returns.index, optimal_weights_sgd))
    )
    portfolio_daily_return_sgd = processed_data.groupby('time')['weighted_return_sgd'].sum().reset_index()
    portfolio_daily_return_sgd.rename(columns={'weighted_return_sgd': 'daily_return'}, inplace=True)
    # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y v√† chuy·ªÉn sang % (v√≠ d·ª•: 125% thay v√¨ 1.25)
    portfolio_daily_return_sgd['cumulative_portfolio_return'] = (1 + portfolio_daily_return_sgd['daily_return']).cumprod() * 100

    st.subheader("L·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa danh m·ª•c (SGD-Volatility)")
    # S·ª≠ d·ª•ng Plotly ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v·ªõi k√Ω hi·ªáu %
    fig_portfolio_sgd = go.Figure()
    fig_portfolio_sgd.add_trace(go.Scatter(
        x=portfolio_daily_return_sgd['time'],
        y=portfolio_daily_return_sgd['cumulative_portfolio_return'],
        mode='lines',
        name='L·ª£i nhu·∫≠n t√≠ch l≈©y',
        hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n t√≠ch l≈©y: %{y:.2f}%<extra></extra>'
    ))
    fig_portfolio_sgd.update_layout(
        title="L·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa danh m·ª•c (SGD-Volatility)",
        xaxis_title="Th·ªùi gian",
        yaxis_title="L·ª£i nhu·∫≠n t√≠ch l≈©y (%)",
        template="plotly_white"
    )
    # Th√™m k√Ω hi·ªáu % v√†o nh√£n c·ªßa tr·ª•c Y
    fig_portfolio_sgd.update_yaxes(ticksuffix="%")
    st.plotly_chart(fig_portfolio_sgd, use_container_width=True)

    # So s√°nh v·ªõi VN-Index
    with st.expander("So s√°nh v·ªõi VN-Index"):
        try:
            vnindex_data = pd.read_csv("vnindex_data.csv")
            vnindex_data['time'] = pd.to_datetime(vnindex_data['time'])
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu VN-Index t·ª´ file 'vnindex_data.csv'.")
        except:
            st.warning("Kh√¥ng t√¨m th·∫•y file 'vnindex_data.csv'. ƒêang t·∫£i d·ªØ li·ªáu VN-Index...")
            try:
                stock = Vnstock().stock(symbol='VNINDEX', source='VCI')
                vnindex_data = stock.quote.history(start='2020-01-01', end='2024-12-31')
                vnindex_data['time'] = pd.to_datetime(vnindex_data['time'])
                vnindex_data.to_csv("vnindex_data.csv", index=False)
                st.success("ƒê√£ l∆∞u d·ªØ li·ªáu VN-Index v√†o file 'vnindex_data.csv'.")
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu VN-Index: {e}")
                st.stop()
        
        vnindex_data['market_return'] = vnindex_data['close'].pct_change()
        # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa VN-Index v√† chuy·ªÉn sang %
        vnindex_data['cumulative_daily_return'] = (1 + vnindex_data['market_return']).cumprod() * 100
        
        comparison_sgd = pd.merge(
            portfolio_daily_return_sgd,
            vnindex_data[['time', 'cumulative_daily_return']],
            on='time',
            how='inner'
        )
        # ƒê·ªïi t√™n c·ªôt ƒë·ªÉ th·ªÉ hi·ªán ƒë∆°n v·ªã %
        comparison_sgd.rename(columns={
            'cumulative_portfolio_return': 'L·ª£i nhu·∫≠n danh m·ª•c (SGD-Volatility) (%)',
            'cumulative_daily_return': 'L·ª£i nhu·∫≠n VN-Index (%)'
        }, inplace=True)
        
        st.subheader("B·∫£ng so s√°nh l·ª£i nhu·∫≠n (10 d√≤ng cu·ªëi)")
        st.dataframe(comparison_sgd[['time', 'L·ª£i nhu·∫≠n danh m·ª•c (SGD-Volatility) (%)', 'L·ª£i nhu·∫≠n VN-Index (%)']].tail(10))
        
        fig_comp_sgd = go.Figure()
        fig_comp_sgd.add_trace(go.Scatter(
            x=comparison_sgd['time'],
            y=comparison_sgd['L·ª£i nhu·∫≠n danh m·ª•c (SGD-Volatility) (%)'],
            mode='lines',
            name='L·ª£i nhu·∫≠n danh m·ª•c (SGD)',
            line=dict(color='green', width=2),
            hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n danh m·ª•c (SGD-Volatility): %{y:.2f}%<extra></extra>'
        ))
        fig_comp_sgd.add_trace(go.Scatter(
            x=comparison_sgd['time'],
            y=comparison_sgd['L·ª£i nhu·∫≠n VN-Index (%)'],
            mode='lines',
            name='L·ª£i nhu·∫≠n VN-Index',
            line=dict(color='red', width=2),
            hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n VN-Index: %{y:.2f}%<extra></extra>'
        ))
        fig_comp_sgd.update_layout(
            title="So s√°nh l·ª£i nhu·∫≠n danh m·ª•c (SGD-Volatility) vs VN-Index",
            xaxis_title="Th·ªùi gian",
            yaxis_title="L·ª£i nhu·∫≠n t√≠ch l≈©y (%)",
            template="plotly_white",
            hovermode="x unified"
        )
        # Th√™m k√Ω hi·ªáu % v√†o nh√£n c·ªßa tr·ª•c Y
        fig_comp_sgd.update_yaxes(ticksuffix="%")
        st.plotly_chart(fig_comp_sgd, use_container_width=True)
        comparison_sgd.to_csv("portfolio_vs_vnindex_comparison_sgd.csv", index=False)
        st.write("D·ªØ li·ªáu so s√°nh ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o 'portfolio_vs_vnindex_comparison_sgd.csv'.")

###########################################
# Tab 4: T·ªëi ∆∞u danh m·ª•c (SGD - Sharpe)
###########################################
with tab4:
    st.header("T·ªëi ∆∞u danh m·ª•c (SGD - Sharpe)")
    try:
        processed_data = pd.read_csv("processed_stock_data.csv")
        processed_data['time'] = pd.to_datetime(processed_data['time'])
        st.success("ƒê√£ t·∫£i d·ªØ li·ªáu x·ª≠ l√Ω t·ª´ file 'processed_stock_data.csv'.")
    except Exception:
        st.error("File 'processed_stock_data.csv' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫£i d·ªØ li·ªáu ·ªü tab 'T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu'.")
        st.stop()

    # T√≠nh l·ª£i nhu·∫≠n k·ª≥ v·ªçng v√† ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai
    expected_returns = processed_data.groupby('symbol')['daily_return'].mean()
    cov_matrix = processed_data.pivot(index='time', columns='symbol', values='daily_return').cov()

    # Chuy·ªÉn ƒë·ªïi th√†nh m·∫£ng NumPy
    expected_returns_np = expected_returns.values
    cov_matrix_np = cov_matrix.values

    # Kh·ªüi t·∫°o tr·ªçng s·ªë ban ƒë·∫ßu
    weights = expected_returns_np / np.sum(expected_returns_np)

    # Tham s·ªë SGD
    learning_rate = 0.01
    epochs = 1000

    # V√≤ng l·∫∑p SGD ƒë·ªÉ t·ªëi ƒëa h√≥a Sharpe
    for epoch in range(epochs):
        # T√≠nh l·ª£i nhu·∫≠n v√† ƒë·ªô bi·∫øn ƒë·ªông c·ªßa danh m·ª•c
        portfolio_return = np.dot(weights, expected_returns_np)
        portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix_np, weights)))
        
        if portfolio_volatility > 0:
            # T√≠nh gradient c·ªßa t·ª∑ s·ªë Sharpe
            numerator = expected_returns_np * portfolio_volatility**2 - portfolio_return * np.dot(cov_matrix_np, weights)
            grad = numerator / (portfolio_volatility**3)
            # C·∫≠p nh·∫≠t tr·ªçng s·ªë theo h∆∞·ªõng t·ªëi ƒëa h√≥a Sharpe (gradient d∆∞∆°ng)
            weights += learning_rate * grad
        else:
            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·ªô bi·∫øn ƒë·ªông b·∫±ng 0
            weights += learning_rate * np.zeros_like(weights)
        
        # Chi·∫øu tr·ªçng s·ªë l√™n simplex: ƒë·∫£m b·∫£o t·ªïng b·∫±ng 1 v√† kh√¥ng √¢m
        weights = np.maximum(weights, 0)
        total = np.sum(weights)
        weights = weights / total if total != 0 else weights

    # Chuy·ªÉn tr·ªçng s·ªë t·ªëi ∆∞u th√†nh pandas Series ƒë·ªÉ d·ªÖ thao t√°c
    optimal_weights_sgd_sharpe = pd.Series(weights, index=expected_returns.index)

    # L·∫•y s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ª´ session state
    investment_amount = st.session_state.get('investment_amount', 0)
    
    # Hi·ªÉn th·ªã tr·ªçng s·ªë v√† s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ªëi ∆∞u
    st.subheader("Tr·ªçng s·ªë v√† s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ªëi ∆∞u (SGD - Sharpe)")
    # T·∫°o DataFrame ch·ª©a k·∫øt qu·∫£
    results_sharpe = pd.DataFrame({
        'C·ªï phi·∫øu': optimal_weights_sgd_sharpe.index,
        'Tr·ªçng s·ªë t·ªëi ∆∞u': optimal_weights_sgd_sharpe.values,
        'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)': optimal_weights_sgd_sharpe * investment_amount
    })
    # ƒê·ªãnh d·∫°ng c·ªôt 'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)' v·ªõi d·∫•u ph·∫©y v√† ƒë∆°n v·ªã VND
    results_sharpe['S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)'] = results_sharpe['S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)'].apply(lambda x: f"{x:,.0f} VND")
    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(results_sharpe)

    # T√≠nh v√† hi·ªÉn th·ªã t·ª∑ s·ªë Sharpe
    portfolio_return = np.dot(optimal_weights_sgd_sharpe, expected_returns_np)
    portfolio_volatility = np.sqrt(np.dot(optimal_weights_sgd_sharpe.T, np.dot(cov_matrix_np, optimal_weights_sgd_sharpe)))
    sharpe_ratio = portfolio_return / portfolio_volatility if portfolio_volatility > 0 else 0
    st.write(f"T·ª∑ l·ªá Sharpe t·ªët nh·∫•t: {sharpe_ratio:.4f}")

    # Bi·ªÉu ƒë·ªì tr·ª±c quan: Pie & Bar
    portfolio_data_sharpe = pd.DataFrame({
        'C·ªï phi·∫øu': expected_returns.index,
        'Tr·ªçng s·ªë t·ªëi ∆∞u': optimal_weights_sgd_sharpe,
        'S·ªë ti·ªÅn ƒë·∫ßu t∆∞': optimal_weights_sgd_sharpe * investment_amount
    })
    portfolio_data_filtered = portfolio_data_sharpe[portfolio_data_sharpe['Tr·ªçng s·ªë t·ªëi ∆∞u'] > 0]

    fig_sharpe = make_subplots(
        rows=1, cols=2,
        subplot_titles=['Tr·ªçng s·ªë t·ªëi ∆∞u (Pie)', 'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (Bar)'],
        specs=[[{'type': 'pie'}, {'type': 'bar'}]]
    )

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc
    fig_sharpe.add_trace(
        go.Pie(
            labels=portfolio_data_filtered['C·ªï phi·∫øu'],
            values=portfolio_data_filtered['Tr·ªçng s·ªë t·ªëi ∆∞u'],
            hole=0.3,
            textinfo='percent+label',
            textfont_size=14,
            marker=dict(
                colors=[random_color() for _ in range(len(portfolio_data_filtered))],
                line=dict(color='#000000', width=2)
            ),
            hoverinfo='label+percent'
        ),
        row=1, col=1
    )

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt v·ªõi d·ªØ li·ªáu s·ªë ti·ªÅn ƒë·∫ßu t∆∞
    fig_sharpe.add_trace(
        go.Bar(
            x=portfolio_data_filtered['C·ªï phi·∫øu'],
            y=portfolio_data_filtered['S·ªë ti·ªÅn ƒë·∫ßu t∆∞'],
            marker=dict(
                color=[random_color() for _ in range(len(portfolio_data_filtered))],
                line=dict(color='#000000', width=2)
            ),
            showlegend=False  # ·∫®n legend c·ªßa bi·ªÉu ƒë·ªì c·ªôt
        ),
        row=1, col=2
    )

    fig_sharpe.update_layout(
        title="So s√°nh tr·ªçng s·ªë v√† s·ªë ti·ªÅn ƒë·∫ßu t∆∞ t·ªëi ∆∞u (SGD - Sharpe)",
        title_x=0.5,
        height=500,
        width=1000,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        showlegend=True
    )

    st.plotly_chart(fig_sharpe, use_container_width=True)

    # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa danh m·ª•c (SGD - Sharpe)
    processed_data['weighted_return_sharpe'] = processed_data['daily_return'] * processed_data['symbol'].map(optimal_weights_sgd_sharpe)
    portfolio_daily_return_sharpe = processed_data.groupby('time')['weighted_return_sharpe'].sum().reset_index()
    portfolio_daily_return_sharpe.rename(columns={'weighted_return_sharpe': 'daily_return'}, inplace=True)
    # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y v√† chuy·ªÉn sang % (v√≠ d·ª•: 125% thay v√¨ 1.25)
    portfolio_daily_return_sharpe['cumulative_portfolio_return'] = (1 + portfolio_daily_return_sharpe['daily_return']).cumprod() * 100

    st.subheader("L·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa danh m·ª•c (SGD - Sharpe)")
    # S·ª≠ d·ª•ng Plotly ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v·ªõi k√Ω hi·ªáu %
    fig_portfolio_sharpe = go.Figure()
    fig_portfolio_sharpe.add_trace(go.Scatter(
        x=portfolio_daily_return_sharpe['time'],
        y=portfolio_daily_return_sharpe['cumulative_portfolio_return'],
        mode='lines',
        name='L·ª£i nhu·∫≠n t√≠ch l≈©y',
        hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n t√≠ch l≈©y: %{y:.2f}%<extra></extra>'
    ))
    fig_portfolio_sharpe.update_layout(
        title="L·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa danh m·ª•c (SGD - Sharpe)",
        xaxis_title="Th·ªùi gian",
        yaxis_title="L·ª£i nhu·∫≠n t√≠ch l≈©y (%)",
        template="plotly_white"
    )
    # Th√™m k√Ω hi·ªáu % v√†o nh√£n c·ªßa tr·ª•c Y
    fig_portfolio_sharpe.update_yaxes(ticksuffix="%")
    st.plotly_chart(fig_portfolio_sharpe, use_container_width=True)

    # So s√°nh v·ªõi VN-Index
    with st.expander("So s√°nh v·ªõi VN-Index"):
        try:
            vnindex_data = pd.read_csv("vnindex_data.csv")
            vnindex_data['time'] = pd.to_datetime(vnindex_data['time'])
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu VN-Index t·ª´ file 'vnindex_data.csv'.")
        except:
            st.warning("Kh√¥ng t√¨m th·∫•y file 'vnindex_data.csv'. ƒêang t·∫£i d·ªØ li·ªáu VN-Index...")
            try:
                stock = Vnstock().stock(symbol='VNINDEX', source='VCI')
                vnindex_data = stock.quote.history(start='2020-01-01', end='2024-12-31')
                vnindex_data['time'] = pd.to_datetime(vnindex_data['time'])
                vnindex_data.to_csv("vnindex_data.csv", index=False)
                st.success("ƒê√£ l∆∞u d·ªØ li·ªáu VN-Index v√†o file 'vnindex_data.csv'.")
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu VN-Index: {e}")
                st.stop()

        vnindex_data['market_return'] = vnindex_data['close'].pct_change()
        # T√≠nh l·ª£i nhu·∫≠n t√≠ch l≈©y c·ªßa VN-Index v√† chuy·ªÉn sang %
        vnindex_data['cumulative_daily_return'] = (1 + vnindex_data['market_return']).cumprod() * 100

        comparison_sharpe = pd.merge(
            portfolio_daily_return_sharpe,
            vnindex_data[['time', 'cumulative_daily_return']],
            on='time',
            how='inner'
        )
        # ƒê·ªïi t√™n c·ªôt ƒë·ªÉ th·ªÉ hi·ªán ƒë∆°n v·ªã %
        comparison_sharpe.rename(columns={
            'cumulative_portfolio_return': 'L·ª£i nhu·∫≠n danh m·ª•c (Sharpe) (%)',
            'cumulative_daily_return': 'L·ª£i nhu·∫≠n VN-Index (%)'
        }, inplace=True)

        st.subheader("B·∫£ng so s√°nh l·ª£i nhu·∫≠n (10 d√≤ng cu·ªëi)")
        st.dataframe(comparison_sharpe[['time', 'L·ª£i nhu·∫≠n danh m·ª•c (Sharpe) (%)', 'L·ª£i nhu·∫≠n VN-Index (%)']].tail(10))

        fig_comp_sharpe = go.Figure()
        fig_comp_sharpe.add_trace(go.Scatter(
            x=comparison_sharpe['time'],
            y=comparison_sharpe['L·ª£i nhu·∫≠n danh m·ª•c (Sharpe) (%)'],
            mode='lines',
            name='L·ª£i nhu·∫≠n danh m·ª•c (Sharpe)',
            line=dict(color='orange', width=2),
            hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n danh m·ª•c (Sharpe): %{y:.2f}%<extra></extra>'
        ))
        fig_comp_sharpe.add_trace(go.Scatter(
            x=comparison_sharpe['time'],
            y=comparison_sharpe['L·ª£i nhu·∫≠n VN-Index (%)'],
            mode='lines',
            name='L·ª£i nhu·∫≠n VN-Index',
            line=dict(color='red', width=2),
            hovertemplate='Ng√†y: %{x}<br>L·ª£i nhu·∫≠n VN-Index: %{y:.2f}%<extra></extra>'
        ))
        fig_comp_sharpe.update_layout(
            title="So s√°nh l·ª£i nhu·∫≠n danh m·ª•c (Sharpe) vs VN-Index",
            xaxis_title="Th·ªùi gian",
            yaxis_title="L·ª£i nhu·∫≠n t√≠ch l≈©y (%)",
            template="plotly_white",
            hovermode="x unified"
        )
        # Th√™m k√Ω hi·ªáu % v√†o nh√£n c·ªßa tr·ª•c Y
        fig_comp_sharpe.update_yaxes(ticksuffix="%")
        st.plotly_chart(fig_comp_sharpe, use_container_width=True)

        comparison_sharpe.to_csv("portfolio_vs_vnindex_comparison_sharpe.csv", index=False)
        st.write("D·ªØ li·ªáu so s√°nh ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o 'portfolio_vs_vnindex_comparison_sharpe.csv'.")

###########################################
# Tab 5: Tr·ª±c quan h√≥a d·ªØ li·ªáu
###########################################
with tab5:
    st.header("Tr·ª±c quan h√≥a d·ªØ li·ªáu")
    try:
        processed_data = pd.read_csv("processed_stock_data.csv")
        processed_data['time'] = pd.to_datetime(processed_data['time'])
    except Exception as e:
        st.error("Kh√¥ng th·ªÉ t·∫£i file 'processed_stock_data.csv'. Vui l√≤ng t·∫£i d·ªØ li·ªáu ·ªü tab 'T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu'.")
        st.stop()
    
    st.subheader("Xu h∆∞·ªõng gi√° ƒë√≥ng c·ª≠a c·ªï phi·∫øu theo th·ªùi gian")
    fig1 = px.line(
        processed_data,
        x='time',
        y='close',
        color='symbol',
        title='Xu h∆∞·ªõng gi√° ƒë√≥ng c·ª≠a c·ªï phi·∫øu theo th·ªùi gian',
        labels={'time': 'Th·ªùi gian', 'close': 'Gi√° ƒë√≥ng c·ª≠a', 'symbol': 'M√£ c·ªï phi·∫øu'},
    )
    fig1.update_layout(
        xaxis_title='Th·ªùi gian',
        yaxis_title='Gi√° ƒë√≥ng c·ª≠a',
        legend_title='M√£ c·ªï phi·∫øu',
        template='plotly_white',
        hovermode='x unified',
        xaxis=dict(showgrid=False),
        yaxis=dict(showgrid=False),
        plot_bgcolor='white'
    )
    st.plotly_chart(fig1, use_container_width=True)
    
    st.subheader("Bi·ªÉu ƒë·ªì nhi·ªát t∆∞∆°ng quan gi√° ƒë√≥ng c·ª≠a")
    close_data = processed_data.pivot_table(values='close', index='time', columns='symbol')
    correlation_matrix = close_data.corr()
    rounded_correlation = correlation_matrix.round(2)
    fig2 = go.Figure(data=go.Heatmap(
        z=correlation_matrix.values,
        x=correlation_matrix.columns,
        y=correlation_matrix.index,
        colorscale='RdBu',
        colorbar=dict(title='H·ªá s·ªë t∆∞∆°ng quan'),
    ))
    for i in range(len(rounded_correlation)):
        for j in range(len(rounded_correlation.columns)):
            fig2.add_annotation(
                text=str(rounded_correlation.iloc[i, j]),
                x=rounded_correlation.columns[j],
                y=rounded_correlation.index[i],
                showarrow=False,
                font=dict(color='black' if rounded_correlation.iloc[i, j] < 0 else 'white')
            )
    fig2.update_traces(
        hovertemplate='<b>M√£ c·ªï phi·∫øu: %{x}</b><br>' +
                      '<b>M√£ c·ªï phi·∫øu: %{y}</b><br>' +
                      'H·ªá s·ªë t∆∞∆°ng quan: %{z:.4f}<extra></extra>'
    )
    fig2.update_layout(
        title='Bi·ªÉu ƒë·ªì nhi·ªát t∆∞∆°ng quan gi√° ƒë√≥ng c·ª≠a',
        xaxis_title='M√£ c·ªï phi·∫øu',
        yaxis_title='M√£ c·ªï phi·∫øu'
    )
    st.plotly_chart(fig2, use_container_width=True)
    
    st.subheader("Bi·ªÉu ƒë·ªì nhi·ªát t∆∞∆°ng quan l·ª£i nhu·∫≠n h√†ng ng√†y")
    returns_data = processed_data.pivot_table(index='time', columns='symbol', values='daily_return')
    correlation_matrix_returns = returns_data.corr()
    fig3 = ff.create_annotated_heatmap(
        z=correlation_matrix_returns.values,
        x=correlation_matrix_returns.columns.tolist(),
        y=correlation_matrix_returns.columns.tolist(),
        colorscale='RdBu',
        zmin=-1, zmax=1
    )
    fig3.update_layout(title="Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c c·ªï phi·∫øu")
    st.plotly_chart(fig3, use_container_width=True)
    
    st.subheader("Bi·∫øn ƒë·ªông c·ªï phi·∫øu theo th·ªùi gian")
    fig4 = px.line(processed_data, x='time', y='volatility', color='symbol', title="Bi·∫øn ƒë·ªông c·ªï phi·∫øu theo th·ªùi gian")
    fig4.update_xaxes(title_text='Ng√†y')
    fig4.update_yaxes(title_text='Bi·∫øn ƒë·ªông')
    st.plotly_chart(fig4, use_container_width=True)

###########################################
# Tab 6: Th√¥ng tin c√¥ng ty
###########################################
with tab6:
    st.header("Th√¥ng tin t·ªïng h·ª£p v·ªÅ c√°c c√¥ng ty")
    
    if 'symbols' not in st.session_state:
        st.error("Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu ·ªü tab 'T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu' tr∆∞·ªõc.")
    else:
        symbols = st.session_state['symbols']
        
        for symbol in symbols:
            st.subheader(f"Th√¥ng tin cho m√£ {symbol}")
            try:
                company = Vnstock().stock(symbol=symbol, source='TCBS').company
                
                with st.expander("**H·ªì s∆° c√¥ng ty:**"):
                    profile = company.profile()
                    if isinstance(profile, pd.DataFrame):
                        st.dataframe(profile)
                    else:
                        st.write(profile)
                
                with st.expander("**C·ªï ƒë√¥ng:**"):
                    shareholders = company.shareholders()
                    if isinstance(shareholders, pd.DataFrame):
                        st.dataframe(shareholders)
                    else:
                        st.write(shareholders)
                
                with st.expander("**Giao d·ªãch n·ªôi b·ªô:**"):
                    insider_deals = company.insider_deals()
                    if isinstance(insider_deals, pd.DataFrame):
                        st.dataframe(insider_deals)
                    else:
                        st.write(insider_deals)
                
                with st.expander("**C√¥ng ty con:**"):
                    subsidiaries = company.subsidiaries()
                    if isinstance(subsidiaries, pd.DataFrame):
                        st.dataframe(subsidiaries)
                    else:
                        st.write(subsidiaries)
                
                with st.expander("**Ban ƒëi·ªÅu h√†nh:**"):
                    officers = company.officers()
                    if isinstance(officers, pd.DataFrame):
                        st.dataframe(officers)
                    else:
                        st.write(officers)
                
                with st.expander("**S·ª± ki·ªán:**"):
                    events = company.events()
                    if isinstance(events, pd.DataFrame):
                        st.dataframe(events)
                    else:
                        st.write(events)
                
                with st.expander("**Tin t·ª©c:**"):
                    news = company.news()
                    if isinstance(news, list) and all(isinstance(item, dict) for item in news):
                        for item in news:
                            st.write(f"- {item.get('title', 'N/A')} ({item.get('date', 'N/A')})")
                            st.write(item.get('summary', 'Kh√¥ng c√≥ t√≥m t·∫Øt'))
                            url = item.get('url', None)
                            if url:
                                st.write(f"[ƒê·ªçc th√™m]({url})")
                            else:
                                st.write("Kh√¥ng c√≥ URL")
                    else:
                        st.write("Tin t·ª©c kh√¥ng kh·∫£ d·ª•ng ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë√∫ng:")
                        st.write(news)
                
                with st.expander("**C·ªï t·ª©c:**"):
                    dividends = company.dividends()
                    if isinstance(dividends, pd.DataFrame):
                        st.dataframe(dividends)
                    else:
                        st.write(dividends)
                
                # M·ª•c "T√¨nh h√¨nh t√†i ch√≠nh" v·ªõi x·ª≠ l√Ω thay th·∫ø n·∫øu thi·∫øu thu·ªôc t√≠nh ratio_summary
                with st.expander("**T√¨nh h√¨nh t√†i ch√≠nh:**"):
                    try:
                        if hasattr(company, 'ratio_summary'):
                            ratio_summary = company.ratio_summary()
                        else:
                            # N·∫øu kh√¥ng c√≥ thu·ªôc t√≠nh, kh·ªüi t·∫°o l·∫°i ƒë·ªëi t∆∞·ª£ng t·ª´ module vnstock.explorer.vci
                            from vnstock.explorer.vci import Company as VCICompany
                            company_alt = VCICompany(symbol)
                            ratio_summary = company_alt.ratio_summary()
                            
                        if isinstance(ratio_summary, pd.DataFrame):
                            st.dataframe(ratio_summary)
                        else:
                            st.write(ratio_summary)
                    except Exception as e:
                        st.write(f"Kh√¥ng c√≥ d·ªØ li·ªáu t√¨nh h√¨nh t√†i ch√≠nh cho m√£ {symbol}: {e}")
                
                # M·ª•c "Th·ªëng k√™ giao d·ªãch" v·ªõi x·ª≠ l√Ω t∆∞∆°ng t·ª± n·∫øu c·∫ßn
                with st.expander("**Th·ªëng k√™ giao d·ªãch:**"):
                    try:
                        if hasattr(company, 'trading_stats'):
                            trading_stats = company.trading_stats()
                        else:
                            from vnstock.explorer.vci import Company as VCICompany
                            company_alt = VCICompany(symbol)
                            trading_stats = company_alt.trading_stats()
                            
                        if isinstance(trading_stats, pd.DataFrame):
                            st.dataframe(trading_stats)
                        else:
                            st.write(trading_stats)
                    except Exception as e:
                        st.write(f"Kh√¥ng c√≥ d·ªØ li·ªáu th·ªëng k√™ giao d·ªãch cho m√£ {symbol}: {e}")
            
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i th√¥ng tin cho m√£ {symbol}: {e}")


with tab7:
    st.header("T·ªïng h·ª£p b√°o c√°o t√†i ch√≠nh")
    
    # C·∫•u h√¨nh Plotly: modebar lu√¥n hi·ªÉn th·ªã
    config = {
        "displayModeBar": True,
        "displaylogo": False
    }
    
    if 'symbols' not in st.session_state:
        st.error("Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu ·ªü trang 'Fetch Stock Data' tr∆∞·ªõc.")
    else:
        symbols = st.session_state['symbols']

        def rename_duplicate_columns(df):
            if df.empty:
                return df
            if isinstance(df.columns, pd.MultiIndex):
                flat_columns = [
                    '_'.join(str(col).strip() for col in multi_col if str(col).strip())
                    for multi_col in df.columns
                ]
            else:
                flat_columns = df.columns.tolist()
            seen = {}
            final_columns = []
            for col in flat_columns:
                if col in seen:
                    seen[col] += 1
                    final_columns.append(f"{col}_{seen[col]}")
                else:
                    seen[col] = 0
                    final_columns.append(col)
            if isinstance(df.columns, pd.MultiIndex):
                df.columns = pd.Index(final_columns)
            else:
                df.columns = final_columns
            return df

        # CSS cho n·ªôi dung c·ªßa expander (background tr·∫Øng, ƒë·ªï b√≥ng,...)
        st.markdown(
            """
            <style>
            .streamlit-expanderContent {
                background-color: white;
                padding: 10px;
                border-radius: 5px;
                box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
            }
            </style>
            """,
            unsafe_allow_html=True
        )
        
        # H√†m random_color (n·∫øu ch∆∞a c√≥)
        import random
        def random_color():
            colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink']
            return random.choice(colors)

        # --- S·ª≠ d·ª•ng caching ƒë·ªÉ t·∫£i d·ªØ li·ªáu t√†i ch√≠nh ---
        @st.cache_data(show_spinner=False)
        def get_financial_data(symbol, report_type, period='year'):
            try:
                stock = Vnstock().stock(symbol=symbol, source='VCI')
                if report_type == "balance":
                    data = stock.finance.balance_sheet(period=period, lang='vi', dropna=True)
                elif report_type == "income":
                    data = stock.finance.income_statement(period=period, lang='vi', dropna=True)
                elif report_type == "cashflow":
                    data = stock.finance.cash_flow(period=period, lang="vi", dropna=True)
                elif report_type == "ratios":
                    data = stock.finance.ratio(period=period, lang='vi', dropna=True)
                else:
                    data = pd.DataFrame()
                data = rename_duplicate_columns(data)
                return data
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu cho {symbol} - {report_type}: {e}")
                return pd.DataFrame()
        
        # ----------------------- L·∫∑p qua t·ª´ng m√£ c·ªï phi·∫øu -----------------------
        for symbol in symbols:
            st.header(f"B√°o c√°o t√†i ch√≠nh cho m√£ {symbol}")

            # ----------------------- 1) B·∫¢NG C√ÇN ƒê·ªêI K·∫æ TO√ÅN (H√†ng nƒÉm) -----------------------
            with st.expander("B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n (H√†ng nƒÉm)"):
                balance_data = get_financial_data(symbol, "balance", period="year")
                if not balance_data.empty and 'NƒÉm' in balance_data.columns:
                    # Lo·∫°i b·ªè d·∫•u ph·∫©y trong NƒÉm, chuy·ªÉn v·ªÅ int, s·∫Øp x·∫øp tƒÉng d·∫ßn
                    balance_data['NƒÉm'] = (
                        balance_data['NƒÉm']
                        .astype(str)
                        .str.replace(',', '', regex=False)
                        .astype(int)
                    )
                    balance_data = balance_data.sort_values('NƒÉm')

                    # Chuy·ªÉn v·ªã DataFrame
                    df_balance_transposed = balance_data.set_index('NƒÉm').T
                    st.write("**B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n (H√†ng nƒÉm):**")
                    st.dataframe(df_balance_transposed)

                    # ---------- Ph·∫ßn bi·ªÉu ƒë·ªì (tham chi·∫øu d·ªØ li·ªáu g·ªëc) ----------
                    numeric_cols = [
                        col for col in balance_data.select_dtypes(include=['float64', 'int64']).columns
                        if col != 'NƒÉm'
                    ]
                    if numeric_cols:
                        selected_cols = st.multiselect(
                            f"Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (B·∫£ng c√¢n ƒë·ªëi {symbol}):",
                            options=numeric_cols,
                            default=[]
                        )
                        available_years = sorted(balance_data['NƒÉm'].unique())
                        selected_years = st.multiselect(
                            f"Ch·ªçn nƒÉm hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì (B·∫£ng c√¢n ƒë·ªëi {symbol}):",
                            options=available_years,
                            default=[]
                        )
                        df_filtered = (
                            balance_data[balance_data['NƒÉm'].isin(selected_years)]
                            if selected_years else balance_data
                        )

                        if selected_cols:
                            for i in range(0, len(selected_cols), 5):
                                cols = st.columns(5)
                                for j, col in enumerate(selected_cols[i:i+5]):
                                    with cols[j]:
                                        st.markdown(f"**{col}**")
                                        tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì CAGR"])
                                        
                                        # Bi·ªÉu ƒë·ªì c·ªôt
                                        with tab1:
                                            fig_bar = go.Figure()
                                            fig_bar.add_trace(go.Bar(
                                                x=df_filtered['NƒÉm'],
                                                y=df_filtered[col],
                                                name=col,
                                                marker_color=random_color(),
                                                hovertemplate=f"{col}: %{{y:.2f}}<br>NƒÉm: %{{x}}"
                                            ))
                                            fig_bar.update_layout(
                                                title=f"{col} - {symbol}",
                                                xaxis_title="NƒÉm",
                                                yaxis_title="Gi√° tr·ªã (T·ª∑ ƒë·ªìng)",
                                                template="plotly_white",
                                                height=300,
                                                margin=dict(l=20, r=20, t=150, b=20)
                                            )
                                            st.plotly_chart(fig_bar, use_container_width=True, config=config, key=f"balance_{symbol}_{col}_bar")
                                        
                                        # Bi·ªÉu ƒë·ªì CAGR
                                        with tab2:
                                            if df_filtered.shape[0] >= 2:
                                                df_sorted = df_filtered.sort_values('NƒÉm')
                                                start_year = df_sorted['NƒÉm'].iloc[0]
                                                start_val = df_sorted[col].iloc[0]
                                                if start_val != 0:
                                                    years = df_sorted['NƒÉm']
                                                    cagr_values = []
                                                    for y, val in zip(years, df_sorted[col]):
                                                        period = y - start_year
                                                        if period == 0:
                                                            cagr_values.append(None)
                                                        else:
                                                            cagr_val = (val / start_val)**(1/period) - 1
                                                            cagr_values.append(cagr_val * 100)
                                                    fig_cagr = go.Figure()
                                                    fig_cagr.add_trace(go.Scatter(
                                                        x=years,
                                                        y=cagr_values,
                                                        mode='lines+markers',
                                                        name='CAGR',
                                                        marker_color='red',
                                                        hovertemplate="CAGR: %{y:.2f}%<br>NƒÉm: %{x}"
                                                    ))
                                                    fig_cagr.update_layout(
                                                        title=f"CAGR c·ªßa {col} - {symbol}",
                                                        xaxis_title="NƒÉm",
                                                        yaxis_title="CAGR (%)",
                                                        template="plotly_white",
                                                        height=300,
                                                        margin=dict(l=20, r=20, t=150, b=20)
                                                    )
                                                    st.plotly_chart(fig_cagr, use_container_width=True, config=config, key=f"balance_{symbol}_{col}_cagr")
                                                else:
                                                    st.info("Gi√° tr·ªã ban ƒë·∫ßu b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh CAGR.")
                                            else:
                                                st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh CAGR.")
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c·ªôt 'NƒÉm' cho b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n c·ªßa {symbol}")

            # ----------------------- 2) B√ÅO C√ÅO L√ÉI L·ªñ (H√†ng nƒÉm) -----------------------
            with st.expander("B√°o c√°o l√£i l·ªó (H√†ng nƒÉm)"):
                income_data = get_financial_data(symbol, "income", period="year")
                if not income_data.empty and 'NƒÉm' in income_data.columns:
                    # Lo·∫°i b·ªè d·∫•u ph·∫©y trong NƒÉm, chuy·ªÉn v·ªÅ int, s·∫Øp x·∫øp tƒÉng d·∫ßn
                    income_data['NƒÉm'] = (
                        income_data['NƒÉm']
                        .astype(str)
                        .str.replace(',', '', regex=False)
                        .astype(int)
                    )
                    income_data = income_data.sort_values('NƒÉm')

                    # Chuy·ªÉn v·ªã DataFrame
                    df_income_transposed = income_data.set_index('NƒÉm').T
                    st.write("**B√°o c√°o l√£i l·ªó (H√†ng nƒÉm):**")
                    st.dataframe(df_income_transposed)

                    # ---------- Ph·∫ßn bi·ªÉu ƒë·ªì (tham chi·∫øu d·ªØ li·ªáu g·ªëc) ----------
                    numeric_cols = [
                        col for col in income_data.select_dtypes(include=['float64', 'int64']).columns
                        if col != 'NƒÉm'
                    ]
                    if numeric_cols:
                        selected_cols = st.multiselect(
                            f"Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (B√°o c√°o l√£i l·ªó {symbol}):",
                            options=numeric_cols,
                            default=[]
                        )
                        available_years = sorted(income_data['NƒÉm'].unique())
                        selected_years = st.multiselect(
                            f"Ch·ªçn nƒÉm hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì (B√°o c√°o l√£i l·ªó {symbol}):",
                            options=available_years,
                            default=[]
                        )
                        df_filtered = (
                            income_data[income_data['NƒÉm'].isin(selected_years)]
                            if selected_years else income_data
                        )

                        if selected_cols:
                            for i in range(0, len(selected_cols), 5):
                                cols = st.columns(5)
                                for j, col in enumerate(selected_cols[i:i+5]):
                                    with cols[j]:
                                        st.markdown(f"**{col}**")
                                        tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì CAGR"])
                                        
                                        with tab1:
                                            fig_bar = go.Figure()
                                            fig_bar.add_trace(go.Bar(
                                                x=df_filtered['NƒÉm'],
                                                y=df_filtered[col],
                                                name=col,
                                                marker_color=random_color(),
                                                hovertemplate=f"{col}: %{{y:.2f}}<br>NƒÉm: %{{x}}"
                                            ))
                                            fig_bar.update_layout(
                                                title=f"{col} - {symbol}",
                                                xaxis_title="NƒÉm",
                                                yaxis_title="Gi√° tr·ªã (T·ª∑ ƒë·ªìng)",
                                                template="plotly_white",
                                                height=300,
                                                margin=dict(l=20, r=20, t=150, b=20)
                                            )
                                            st.plotly_chart(fig_bar, use_container_width=True, config=config, key=f"income_{symbol}_{col}_bar")
                                        
                                        with tab2:
                                            if df_filtered.shape[0] >= 2:
                                                df_sorted = df_filtered.sort_values('NƒÉm')
                                                start_year = df_sorted['NƒÉm'].iloc[0]
                                                start_val = df_sorted[col].iloc[0]
                                                if start_val != 0:
                                                    years = df_sorted['NƒÉm']
                                                    cagr_values = []
                                                    for y, val in zip(years, df_sorted[col]):
                                                        period = y - start_year
                                                        if period == 0:
                                                            cagr_values.append(None)
                                                        else:
                                                            cagr_val = (val / start_val)**(1/period) - 1
                                                            cagr_values.append(cagr_val * 100)
                                                    fig_cagr = go.Figure()
                                                    fig_cagr.add_trace(go.Scatter(
                                                        x=years,
                                                        y=cagr_values,
                                                        mode='lines+markers',
                                                        name='CAGR',
                                                        marker_color='red',
                                                        hovertemplate="CAGR: %{y:.2f}%<br>NƒÉm: %{x}"
                                                    ))
                                                    fig_cagr.update_layout(
                                                        title=f"CAGR c·ªßa {col} - {symbol}",
                                                        xaxis_title="NƒÉm",
                                                        yaxis_title="CAGR (%)",
                                                        template="plotly_white",
                                                        height=300,
                                                        margin=dict(l=20, r=20, t=150, b=20)
                                                    )
                                                    st.plotly_chart(fig_cagr, use_container_width=True, config=config, key=f"income_{symbol}_{col}_cagr")
                                                else:
                                                    st.info("Gi√° tr·ªã ban ƒë·∫ßu b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh CAGR.")
                                            else:
                                                st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh CAGR.")
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c·ªôt 'NƒÉm' cho b√°o c√°o l√£i l·ªó c·ªßa {symbol}")

            # ----------------------- 3) B√ÅO C√ÅO L∆ØU CHUY·ªÇN TI·ªÄN T·ªÜ (H√†ng nƒÉm) -----------------------
            with st.expander("B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá (H√†ng nƒÉm)"):
                cash_flow_data = get_financial_data(symbol, "cashflow", period="year")
                if not cash_flow_data.empty and 'NƒÉm' in cash_flow_data.columns:
                    # Lo·∫°i b·ªè d·∫•u ph·∫©y trong NƒÉm, chuy·ªÉn v·ªÅ int, s·∫Øp x·∫øp tƒÉng d·∫ßn
                    cash_flow_data['NƒÉm'] = (
                        cash_flow_data['NƒÉm']
                        .astype(str)
                        .str.replace(',', '', regex=False)
                        .astype(int)
                    )
                    cash_flow_data = cash_flow_data.sort_values('NƒÉm')

                    # Chuy·ªÉn v·ªã DataFrame
                    df_cashflow_transposed = cash_flow_data.set_index('NƒÉm').T
                    st.write("**B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá (H√†ng nƒÉm):**")
                    st.dataframe(df_cashflow_transposed)

                    # ---------- Ph·∫ßn bi·ªÉu ƒë·ªì (tham chi·∫øu d·ªØ li·ªáu g·ªëc) ----------
                    numeric_cols = [
                        col for col in cash_flow_data.select_dtypes(include=['float64', 'int64']).columns
                        if col != 'NƒÉm'
                    ]
                    if numeric_cols:
                        selected_cols = st.multiselect(
                            f"Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (B√°o c√°o l∆∞u chuy·ªÉn {symbol}):",
                            options=numeric_cols,
                            default=[]
                        )
                        available_years = sorted(cash_flow_data['NƒÉm'].unique())
                        selected_years = st.multiselect(
                            f"Ch·ªçn nƒÉm hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì (B√°o c√°o l∆∞u chuy·ªÉn {symbol}):",
                            options=available_years,
                            default=[]
                        )
                        df_filtered = (
                            cash_flow_data[cash_flow_data['NƒÉm'].isin(selected_years)]
                            if selected_years else cash_flow_data
                        )

                        if selected_cols:
                            for i in range(0, len(selected_cols), 5):
                                cols = st.columns(5)
                                for j, col in enumerate(selected_cols[i:i+5]):
                                    with cols[j]:
                                        st.markdown(f"**{col}**")
                                        tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì CAGR"])
                                        
                                        with tab1:
                                            fig_bar = go.Figure()
                                            fig_bar.add_trace(go.Bar(
                                                x=df_filtered['NƒÉm'],
                                                y=df_filtered[col],
                                                name=col,
                                                marker_color=random_color(),
                                                hovertemplate=f"{col}: %{{y:.2f}}<br>NƒÉm: %{{x}}"
                                            ))
                                            fig_bar.update_layout(
                                                title=f"{col} - {symbol}",
                                                xaxis_title="NƒÉm",
                                                yaxis_title="Gi√° tr·ªã (T·ª∑ ƒë·ªìng)",
                                                template="plotly_white",
                                                height=300,
                                                margin=dict(l=20, r=20, t=150, b=20)
                                            )
                                            st.plotly_chart(fig_bar, use_container_width=True, config=config, key=f"cashflow_{symbol}_{col}_bar")
                                        
                                        with tab2:
                                            if df_filtered.shape[0] >= 2:
                                                df_sorted = df_filtered.sort_values('NƒÉm')
                                                start_year = df_sorted['NƒÉm'].iloc[0]
                                                start_val = df_sorted[col].iloc[0]
                                                if start_val != 0:
                                                    years = df_sorted['NƒÉm']
                                                    cagr_values = []
                                                    for y, val in zip(years, df_sorted[col]):
                                                        period = y - start_year
                                                        if period == 0:
                                                            cagr_values.append(None)
                                                        else:
                                                            cagr_val = (val / start_val)**(1/period) - 1
                                                            cagr_values.append(cagr_val * 100)
                                                    fig_cagr = go.Figure()
                                                    fig_cagr.add_trace(go.Scatter(
                                                        x=years,
                                                        y=cagr_values,
                                                        mode='lines+markers',
                                                        name='CAGR',
                                                        marker_color='red',
                                                        hovertemplate="CAGR: %{y:.2f}%<br>NƒÉm: %{x}"
                                                    ))
                                                    fig_cagr.update_layout(
                                                        title=f"CAGR c·ªßa {col} - {symbol}",
                                                        xaxis_title="NƒÉm",
                                                        yaxis_title="CAGR (%)",
                                                        template="plotly_white",
                                                        height=300,
                                                        margin=dict(l=20, r=20, t=150, b=20)
                                                    )
                                                    st.plotly_chart(fig_cagr, use_container_width=True, config=config, key=f"cashflow_{symbol}_{col}_cagr")
                                                else:
                                                    st.info("Gi√° tr·ªã ban ƒë·∫ßu b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh CAGR.")
                                            else:
                                                st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh CAGR.")
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c·ªôt 'NƒÉm' cho b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá c·ªßa {symbol}")

            # ----------------------- 4) CH·ªà S·ªê T√ÄI CH√çNH (H√†ng nƒÉm) -----------------------
            with st.expander("Ch·ªâ s·ªë t√†i ch√≠nh (H√†ng nƒÉm)"):
                ratios_data = get_financial_data(symbol, "ratios", period="year")
                # ·ªû ph·∫ßn n√†y c·ªôt nƒÉm l√† 'Meta_NƒÉm'
                if not ratios_data.empty and 'Meta_NƒÉm' in ratios_data.columns:
                    # Lo·∫°i b·ªè d·∫•u ph·∫©y trong Meta_NƒÉm, chuy·ªÉn v·ªÅ int, s·∫Øp x·∫øp tƒÉng d·∫ßn
                    ratios_data['Meta_NƒÉm'] = (
                        ratios_data['Meta_NƒÉm']
                        .astype(str)
                        .str.replace(',', '', regex=False)
                        .astype(int)
                    )
                    ratios_data = ratios_data.sort_values('Meta_NƒÉm')

                    # Chuy·ªÉn v·ªã DataFrame
                    df_ratios_transposed = ratios_data.set_index('Meta_NƒÉm').T
                    st.write("**Ch·ªâ s·ªë t√†i ch√≠nh (H√†ng nƒÉm):**")
                    st.dataframe(df_ratios_transposed)

                    # ---------- Ph·∫ßn bi·ªÉu ƒë·ªì (tham chi·∫øu d·ªØ li·ªáu g·ªëc) ----------
                    numeric_cols = [
                        col for col in ratios_data.select_dtypes(include=['float64', 'int64']).columns
                        if col != 'Meta_NƒÉm'
                    ]
                    if numeric_cols:
                        selected_cols = st.multiselect(
                            f"Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (Ch·ªâ s·ªë t√†i ch√≠nh {symbol}):",
                            options=numeric_cols,
                            default=[]
                        )
                        available_years = sorted(ratios_data['Meta_NƒÉm'].unique())
                        selected_years = st.multiselect(
                            f"Ch·ªçn nƒÉm hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì (Ch·ªâ s·ªë t√†i ch√≠nh {symbol}):",
                            options=available_years,
                            default=[]
                        )
                        df_filtered = (
                            ratios_data[ratios_data['Meta_NƒÉm'].isin(selected_years)]
                            if selected_years else ratios_data
                        )

                        if selected_cols:
                            for i in range(0, len(selected_cols), 5):
                                cols = st.columns(5)
                                for j, col in enumerate(selected_cols[i:i+5]):
                                    with cols[j]:
                                        st.markdown(f"**{col}**")
                                        tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì CAGR"])
                                        
                                        with tab1:
                                            fig_bar = go.Figure()
                                            fig_bar.add_trace(go.Bar(
                                                x=df_filtered['Meta_NƒÉm'],
                                                y=df_filtered[col],
                                                name=col,
                                                marker_color=random_color(),
                                                hovertemplate=f"{col}: %{{y:.2f}}<br>NƒÉm: %{{x}}"
                                            ))
                                            fig_bar.update_layout(
                                                title=f"{col} - {symbol}",
                                                xaxis_title="NƒÉm",
                                                yaxis_title="Gi√° tr·ªã",
                                                template="plotly_white",
                                                height=300,
                                                margin=dict(l=20, r=20, t=150, b=20)
                                            )
                                            st.plotly_chart(fig_bar, use_container_width=True, config=config, key=f"ratios_{symbol}_{col}_bar")
                                        
                                        with tab2:
                                            if df_filtered.shape[0] >= 2:
                                                df_sorted = df_filtered.sort_values('Meta_NƒÉm')
                                                start_year = df_sorted['Meta_NƒÉm'].iloc[0]
                                                start_val = df_sorted[col].iloc[0]
                                                if start_val != 0:
                                                    years = df_sorted['Meta_NƒÉm']
                                                    cagr_values = []
                                                    for y, val in zip(years, df_sorted[col]):
                                                        period = y - start_year
                                                        if period == 0:
                                                            cagr_values.append(None)
                                                        else:
                                                            cagr_val = (val / start_val)**(1/period) - 1
                                                            cagr_values.append(cagr_val * 100)
                                                    fig_cagr = go.Figure()
                                                    fig_cagr.add_trace(go.Scatter(
                                                        x=years,
                                                        y=cagr_values,
                                                        mode='lines+markers',
                                                        name='CAGR',
                                                        marker_color='red',
                                                        hovertemplate="CAGR: %{y:.2f}%<br>NƒÉm: %{x}"
                                                    ))
                                                    fig_cagr.update_layout(
                                                        title=f"CAGR c·ªßa {col} - {symbol}",
                                                        xaxis_title="NƒÉm",
                                                        yaxis_title="CAGR (%)",
                                                        template="plotly_white",
                                                        height=300,
                                                        margin=dict(l=20, r=20, t=150, b=20)
                                                    )
                                                    st.plotly_chart(fig_cagr, use_container_width=True, config=config, key=f"ratios_{symbol}_{col}_cagr")
                                                else:
                                                    st.info("Gi√° tr·ªã ban ƒë·∫ßu b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh CAGR.")
                                            else:
                                                st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh CAGR.")
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c·ªôt 'Meta_NƒÉm' cho ch·ªâ s·ªë t√†i ch√≠nh c·ªßa {symbol}")

            # ----------------------- 5) B·∫¢NG C√ÇN ƒê·ªêI K·∫æ TO√ÅN (H√†ng qu√Ω) -----------------------
            with st.expander("B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n (H√†ng qu√Ω)"):
                balance_data_quarter = get_financial_data(symbol, "balance", period="quarter")
                if not balance_data_quarter.empty and 'NƒÉm' in balance_data_quarter.columns and 'K·ª≥' in balance_data_quarter.columns:
                    # T·∫°o c·ªôt m·ªõi k·∫øt h·ª£p NƒÉm v√† K·ª≥
                    balance_data_quarter['NƒÉm_K·ª≥'] = balance_data_quarter['NƒÉm'].astype(str) + " Q" + balance_data_quarter['K·ª≥'].astype(str)
                    balance_data_quarter = balance_data_quarter.sort_values(['NƒÉm', 'K·ª≥'])

                    # Chuy·ªÉn v·ªã DataFrame
                    df_balance_transposed_quarter = balance_data_quarter.set_index('NƒÉm_K·ª≥').drop(columns=['NƒÉm', 'K·ª≥']).T
                    st.write("**B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n (H√†ng qu√Ω):**")
                    st.dataframe(df_balance_transposed_quarter)

                    # ---------- Ph·∫ßn bi·ªÉu ƒë·ªì (tham chi·∫øu d·ªØ li·ªáu g·ªëc) ----------
                    numeric_cols = [
                        col for col in balance_data_quarter.select_dtypes(include=['float64', 'int64']).columns
                        if col not in ['NƒÉm', 'K·ª≥', 'NƒÉm_K·ª≥']
                    ]
                    if numeric_cols:
                        selected_cols = st.multiselect(
                            f"Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (B·∫£ng c√¢n ƒë·ªëi h√†ng qu√Ω {symbol}):",
                            options=numeric_cols,
                            default=[]
                        )
                        available_quarters = sorted(balance_data_quarter['NƒÉm_K·ª≥'].unique())
                        selected_quarters = st.multiselect(
                            f"Ch·ªçn qu√Ω hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì (B·∫£ng c√¢n ƒë·ªëi h√†ng qu√Ω {symbol}):",
                            options=available_quarters,
                            default=[]
                        )
                        df_filtered = (
                            balance_data_quarter[balance_data_quarter['NƒÉm_K·ª≥'].isin(selected_quarters)]
                            if selected_quarters else balance_data_quarter
                        )

                        if selected_cols:
                            for i in range(0, len(selected_cols), 5):
                                cols = st.columns(5)
                                for j, col in enumerate(selected_cols[i:i+5]):
                                    with cols[j]:
                                        st.markdown(f"**{col}**")
                                        tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì CAGR"])
                                        
                                        # Bi·ªÉu ƒë·ªì c·ªôt
                                        with tab1:
                                            fig_bar = go.Figure()
                                            fig_bar.add_trace(go.Bar(
                                                x=df_filtered['NƒÉm_K·ª≥'],
                                                y=df_filtered[col],
                                                name=col,
                                                marker_color=random_color(),
                                                hovertemplate=f"{col}: %{{y:.2f}}<br>Qu√Ω: %{{x}}"
                                            ))
                                            fig_bar.update_layout(
                                                title=f"{col} - {symbol}",
                                                xaxis_title="Qu√Ω",
                                                yaxis_title="Gi√° tr·ªã (T·ª∑ ƒë·ªìng)",
                                                template="plotly_white",
                                                height=300,
                                                margin=dict(l=20, r=20, t=150, b=20)
                                            )
                                            st.plotly_chart(fig_bar, use_container_width=True, config=config, key=f"balance_quarter_{symbol}_{col}_bar")
                                        
                                        # Bi·ªÉu ƒë·ªì CAGR
                                        with tab2:
                                            if df_filtered.shape[0] >= 2:
                                                df_sorted = df_filtered.sort_values(['NƒÉm', 'K·ª≥'])
                                                start_quarter = df_sorted['NƒÉm_K·ª≥'].iloc[0]
                                                start_val = df_sorted[col].iloc[0]
                                                if start_val != 0:
                                                    quarters = df_sorted['NƒÉm_K·ª≥']
                                                    cagr_values = []
                                                    for idx, (q, val) in enumerate(zip(quarters, df_sorted[col])):
                                                        period = idx / 4  # M·ªói qu√Ω l√† 1/4 nƒÉm
                                                        if period == 0:
                                                            cagr_values.append(None)
                                                        else:
                                                            cagr_val = (val / start_val)**(1/period) - 1
                                                            cagr_values.append(cagr_val * 100)
                                                    fig_cagr = go.Figure()
                                                    fig_cagr.add_trace(go.Scatter(
                                                        x=quarters,
                                                        y=cagr_values,
                                                        mode='lines+markers',
                                                        name='CAGR',
                                                        marker_color='red',
                                                        hovertemplate="CAGR: %{y:.2f}%<br>Qu√Ω: %{x}"
                                                    ))
                                                    fig_cagr.update_layout(
                                                        title=f"CAGR c·ªßa {col} - {symbol}",
                                                        xaxis_title="Qu√Ω",
                                                        yaxis_title="CAGR (%)",
                                                        template="plotly_white",
                                                        height=300,
                                                        margin=dict(l=20, r=20, t=150, b=20)
                                                    )
                                                    st.plotly_chart(fig_cagr, use_container_width=True, config=config, key=f"balance_quarter_{symbol}_{col}_cagr")
                                                else:
                                                    st.info("Gi√° tr·ªã ban ƒë·∫ßu b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh CAGR.")
                                            else:
                                                st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh CAGR.")
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c·ªôt 'NƒÉm'/'K·ª≥' cho b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n h√†ng qu√Ω c·ªßa {symbol}")

            # ----------------------- 6) B√ÅO C√ÅO L√ÉI L·ªñ (H√†ng qu√Ω) -----------------------
            with st.expander("B√°o c√°o l√£i l·ªó (H√†ng qu√Ω)"):
                income_data_quarter = get_financial_data(symbol, "income", period="quarter")
                if not income_data_quarter.empty and 'NƒÉm' in income_data_quarter.columns and 'K·ª≥' in income_data_quarter.columns:
                    # T·∫°o c·ªôt m·ªõi k·∫øt h·ª£p NƒÉm v√† K·ª≥
                    income_data_quarter['NƒÉm_K·ª≥'] = income_data_quarter['NƒÉm'].astype(str) + " Q" + income_data_quarter['K·ª≥'].astype(str)
                    income_data_quarter = income_data_quarter.sort_values(['NƒÉm', 'K·ª≥'])

                    # Chuy·ªÉn v·ªã DataFrame
                    df_income_transposed_quarter = income_data_quarter.set_index('NƒÉm_K·ª≥').drop(columns=['NƒÉm', 'K·ª≥']).T
                    st.write("**B√°o c√°o l√£i l·ªó (H√†ng qu√Ω):**")
                    st.dataframe(df_income_transposed_quarter)

                    # ---------- Ph·∫ßn bi·ªÉu ƒë·ªì (tham chi·∫øu d·ªØ li·ªáu g·ªëc) ----------
                    numeric_cols = [
                        col for col in income_data_quarter.select_dtypes(include=['float64', 'int64']).columns
                        if col not in ['NƒÉm', 'K·ª≥', 'NƒÉm_K·ª≥']
                    ]
                    if numeric_cols:
                        selected_cols = st.multiselect(
                            f"Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (B√°o c√°o l√£i l·ªó h√†ng qu√Ω {symbol}):",
                            options=numeric_cols,
                            default=[]
                        )
                        available_quarters = sorted(income_data_quarter['NƒÉm_K·ª≥'].unique())
                        selected_quarters = st.multiselect(
                            f"Ch·ªçn qu√Ω hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì (B√°o c√°o l√£i l·ªó h√†ng qu√Ω {symbol}):",
                            options=available_quarters,
                            default=[]
                        )
                        df_filtered = (
                            income_data_quarter[income_data_quarter['NƒÉm_K·ª≥'].isin(selected_quarters)]
                            if selected_quarters else income_data_quarter
                        )

                        if selected_cols:
                            for i in range(0, len(selected_cols), 5):
                                cols = st.columns(5)
                                for j, col in enumerate(selected_cols[i:i+5]):
                                    with cols[j]:
                                        st.markdown(f"**{col}**")
                                        tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì CAGR"])
                                        
                                        # Bi·ªÉu ƒë·ªì c·ªôt
                                        with tab1:
                                            fig_bar = go.Figure()
                                            fig_bar.add_trace(go.Bar(
                                                x=df_filtered['NƒÉm_K·ª≥'],
                                                y=df_filtered[col],
                                                name=col,
                                                marker_color=random_color(),
                                                hovertemplate=f"{col}: %{{y:.2f}}<br>Qu√Ω: %{{x}}"
                                            ))
                                            fig_bar.update_layout(
                                                title=f"{col} - {symbol}",
                                                xaxis_title="Qu√Ω",
                                                yaxis_title="Gi√° tr·ªã (T·ª∑ ƒë·ªìng)",
                                                template="plotly_white",
                                                height=300,
                                                margin=dict(l=20, r=20, t=150, b=20)
                                            )
                                            st.plotly_chart(fig_bar, use_container_width=True, config=config, key=f"income_quarter_{symbol}_{col}_bar")
                                        
                                        # Bi·ªÉu ƒë·ªì CAGR
                                        with tab2:
                                            if df_filtered.shape[0] >= 2:
                                                df_sorted = df_filtered.sort_values(['NƒÉm', 'K·ª≥'])
                                                start_quarter = df_sorted['NƒÉm_K·ª≥'].iloc[0]
                                                start_val = df_sorted[col].iloc[0]
                                                if start_val != 0:
                                                    quarters = df_sorted['NƒÉm_K·ª≥']
                                                    cagr_values = []
                                                    for idx, (q, val) in enumerate(zip(quarters, df_sorted[col])):
                                                        period = idx / 4  # M·ªói qu√Ω l√† 1/4 nƒÉm
                                                        if period == 0:
                                                            cagr_values.append(None)
                                                        else:
                                                            cagr_val = (val / start_val)**(1/period) - 1
                                                            cagr_values.append(cagr_val * 100)
                                                    fig_cagr = go.Figure()
                                                    fig_cagr.add_trace(go.Scatter(
                                                        x=quarters,
                                                        y=cagr_values,
                                                        mode='lines+markers',
                                                        name='CAGR',
                                                        marker_color='red',
                                                        hovertemplate="CAGR: %{y:.2f}%<br>Qu√Ω: %{x}"
                                                    ))
                                                    fig_cagr.update_layout(
                                                        title=f"CAGR c·ªßa {col} - {symbol}",
                                                        xaxis_title="Qu√Ω",
                                                        yaxis_title="CAGR (%)",
                                                        template="plotly_white",
                                                        height=300,
                                                        margin=dict(l=20, r=20, t=150, b=20)
                                                    )
                                                    st.plotly_chart(fig_cagr, use_container_width=True, config=config, key=f"income_quarter_{symbol}_{col}_cagr")
                                                else:
                                                    st.info("Gi√° tr·ªã ban ƒë·∫ßu b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh CAGR.")
                                            else:
                                                st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh CAGR.")
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c·ªôt 'NƒÉm'/'K·ª≥' cho b√°o c√°o l√£i l·ªó h√†ng qu√Ω c·ªßa {symbol}")

            # ----------------------- 7) B√ÅO C√ÅO L∆ØU CHUY·ªÇN TI·ªÄN T·ªÜ (H√†ng qu√Ω) -----------------------
            with st.expander("B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá (H√†ng qu√Ω)"):
                cash_flow_data_quarter = get_financial_data(symbol, "cashflow", period="quarter")
                if not cash_flow_data_quarter.empty and 'NƒÉm' in cash_flow_data_quarter.columns and 'K·ª≥' in cash_flow_data_quarter.columns:
                    # T·∫°o c·ªôt m·ªõi k·∫øt h·ª£p NƒÉm v√† K·ª≥
                    cash_flow_data_quarter['NƒÉm_K·ª≥'] = cash_flow_data_quarter['NƒÉm'].astype(str) + " Q" + cash_flow_data_quarter['K·ª≥'].astype(str)
                    cash_flow_data_quarter = cash_flow_data_quarter.sort_values(['NƒÉm', 'K·ª≥'])

                    # Chuy·ªÉn v·ªã DataFrame
                    df_cashflow_transposed_quarter = cash_flow_data_quarter.set_index('NƒÉm_K·ª≥').drop(columns=['NƒÉm', 'K·ª≥']).T
                    st.write("**B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá (H√†ng qu√Ω):**")
                    st.dataframe(df_cashflow_transposed_quarter)

                    # ---------- Ph·∫ßn bi·ªÉu ƒë·ªì (tham chi·∫øu d·ªØ li·ªáu g·ªëc) ----------
                    numeric_cols = [
                        col for col in cash_flow_data_quarter.select_dtypes(include=['float64', 'int64']).columns
                        if col not in ['NƒÉm', 'K·ª≥', 'NƒÉm_K·ª≥']
                    ]
                    if numeric_cols:
                        selected_cols = st.multiselect(
                            f"Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (B√°o c√°o l∆∞u chuy·ªÉn h√†ng qu√Ω {symbol}):",
                            options=numeric_cols,
                            default=[]
                        )
                        available_quarters = sorted(cash_flow_data_quarter['NƒÉm_K·ª≥'].unique())
                        selected_quarters = st.multiselect(
                            f"Ch·ªçn qu√Ω hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì (B√°o c√°o l∆∞u chuy·ªÉn h√†ng qu√Ω {symbol}):",
                            options=available_quarters,
                            default=[]
                        )
                        df_filtered = (
                            cash_flow_data_quarter[cash_flow_data_quarter['NƒÉm_K·ª≥'].isin(selected_quarters)]
                            if selected_quarters else cash_flow_data_quarter
                        )

                        if selected_cols:
                            for i in range(0, len(selected_cols), 5):
                                cols = st.columns(5)
                                for j, col in enumerate(selected_cols[i:i+5]):
                                    with cols[j]:
                                        st.markdown(f"**{col}**")
                                        tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì CAGR"])
                                        
                                        # Bi·ªÉu ƒë·ªì c·ªôt
                                        with tab1:
                                            fig_bar = go.Figure()
                                            fig_bar.add_trace(go.Bar(
                                                x=df_filtered['NƒÉm_K·ª≥'],
                                                y=df_filtered[col],
                                                name=col,
                                                marker_color=random_color(),
                                                hovertemplate=f"{col}: %{{y:.2f}}<br>Qu√Ω: %{{x}}"
                                            ))
                                            fig_bar.update_layout(
                                                title=f"{col} - {symbol}",
                                                xaxis_title="Qu√Ω",
                                                yaxis_title="Gi√° tr·ªã (T·ª∑ ƒë·ªìng)",
                                                template="plotly_white",
                                                height=300,
                                                margin=dict(l=20, r=20, t=150, b=20)
                                            )
                                            st.plotly_chart(fig_bar, use_container_width=True, config=config, key=f"cashflow_quarter_{symbol}_{col}_bar")
                                        
                                        # Bi·ªÉu ƒë·ªì CAGR
                                        with tab2:
                                            if df_filtered.shape[0] >= 2:
                                                df_sorted = df_filtered.sort_values(['NƒÉm', 'K·ª≥'])
                                                start_quarter = df_sorted['NƒÉm_K·ª≥'].iloc[0]
                                                start_val = df_sorted[col].iloc[0]
                                                if start_val != 0:
                                                    quarters = df_sorted['NƒÉm_K·ª≥']
                                                    cagr_values = []
                                                    for idx, (q, val) in enumerate(zip(quarters, df_sorted[col])):
                                                        period = idx / 4  # M·ªói qu√Ω l√† 1/4 nƒÉm
                                                        if period == 0:
                                                            cagr_values.append(None)
                                                        else:
                                                            cagr_val = (val / start_val)**(1/period) - 1
                                                            cagr_values.append(cagr_val * 100)
                                                    fig_cagr = go.Figure()
                                                    fig_cagr.add_trace(go.Scatter(
                                                        x=quarters,
                                                        y=cagr_values,
                                                        mode='lines+markers',
                                                        name='CAGR',
                                                        marker_color='red',
                                                        hovertemplate="CAGR: %{y:.2f}%<br>Qu√Ω: %{x}"
                                                    ))
                                                    fig_cagr.update_layout(
                                                        title=f"CAGR c·ªßa {col} - {symbol}",
                                                        xaxis_title="Qu√Ω",
                                                        yaxis_title="CAGR (%)",
                                                        template="plotly_white",
                                                        height=300,
                                                        margin=dict(l=20, r=20, t=150, b=20)
                                                    )
                                                    st.plotly_chart(fig_cagr, use_container_width=True, config=config, key=f"cashflow_quarter_{symbol}_{col}_cagr")
                                                else:
                                                    st.info("Gi√° tr·ªã ban ƒë·∫ßu b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh CAGR.")
                                            else:
                                                st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh CAGR.")
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c·ªôt 'NƒÉm'/'K·ª≥' cho b√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá h√†ng qu√Ω c·ªßa {symbol}")

            # ----------------------- 8) CH·ªà S·ªê T√ÄI CH√çNH (H√†ng qu√Ω) -----------------------
            with st.expander("Ch·ªâ s·ªë t√†i ch√≠nh (H√†ng qu√Ω)"):
                ratios_data_quarter = get_financial_data(symbol, "ratios", period="quarter")
                if not ratios_data_quarter.empty and 'Meta_NƒÉm' in ratios_data_quarter.columns and 'Meta_K·ª≥' in ratios_data_quarter.columns:
                    # T·∫°o c·ªôt m·ªõi k·∫øt h·ª£p Meta_NƒÉm v√† Meta_K·ª≥
                    ratios_data_quarter['NƒÉm_K·ª≥'] = ratios_data_quarter['Meta_NƒÉm'].astype(str) + " Q" + ratios_data_quarter['Meta_K·ª≥'].astype(str)
                    ratios_data_quarter = ratios_data_quarter.sort_values(['Meta_NƒÉm', 'Meta_K·ª≥'])
            
                    # Chuy·ªÉn v·ªã DataFrame (b·ªè c·ªôt Meta_NƒÉm v√† Meta_K·ª≥)
                    df_ratios_transposed_quarter = ratios_data_quarter.set_index('NƒÉm_K·ª≥').drop(columns=['Meta_NƒÉm', 'Meta_K·ª≥']).T
                    st.write("**Ch·ªâ s·ªë t√†i ch√≠nh (H√†ng qu√Ω):**")
                    st.dataframe(df_ratios_transposed_quarter)
            
                    # ---------- Ph·∫ßn bi·ªÉu ƒë·ªì (tham chi·∫øu d·ªØ li·ªáu g·ªëc) ----------
                    numeric_cols = [
                        col for col in ratios_data_quarter.select_dtypes(include=['float64', 'int64']).columns
                        if col not in ['Meta_NƒÉm', 'Meta_K·ª≥', 'NƒÉm_K·ª≥']
                    ]
                    if numeric_cols:
                        selected_cols = st.multiselect(
                            f"Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (Ch·ªâ s·ªë t√†i ch√≠nh h√†ng qu√Ω {symbol}):",
                            options=numeric_cols,
                            default=[]
                        )
                        available_quarters = sorted(ratios_data_quarter['NƒÉm_K·ª≥'].unique())
                        selected_quarters = st.multiselect(
                            f"Ch·ªçn qu√Ω hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì (Ch·ªâ s·ªë t√†i ch√≠nh h√†ng qu√Ω {symbol}):",
                            options=available_quarters,
                            default=[]
                        )
                        df_filtered = (
                            ratios_data_quarter[ratios_data_quarter['NƒÉm_K·ª≥'].isin(selected_quarters)]
                            if selected_quarters else ratios_data_quarter
                        )
            
                        if selected_cols:
                            for i in range(0, len(selected_cols), 5):
                                cols = st.columns(5)
                                for j, col in enumerate(selected_cols[i:i+5]):
                                    with cols[j]:
                                        st.markdown(f"**{col}**")
                                        tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì CAGR"])
            
                                        # Bi·ªÉu ƒë·ªì c·ªôt
                                        with tab1:
                                            fig_bar = go.Figure()
                                            fig_bar.add_trace(go.Bar(
                                                x=df_filtered['NƒÉm_K·ª≥'],
                                                y=df_filtered[col],
                                                name=col,
                                                marker_color=random_color(),
                                                hovertemplate=f"{col}: %{{y:.2f}}<br>Qu√Ω: %{{x}}"
                                            ))
                                            fig_bar.update_layout(
                                                title=f"{col} - {symbol}",
                                                xaxis_title="Qu√Ω",
                                                yaxis_title="Gi√° tr·ªã",
                                                template="plotly_white",
                                                height=300,
                                                margin=dict(l=20, r=20, t=150, b=20)
                                            )
                                            st.plotly_chart(fig_bar, use_container_width=True, config=config, key=f"ratios_quarter_{symbol}_{col}_bar")
            
                                        # Bi·ªÉu ƒë·ªì CAGR
                                        with tab2:
                                            if df_filtered.shape[0] >= 2:
                                                df_sorted = df_filtered.sort_values(['Meta_NƒÉm', 'Meta_K·ª≥'])
                                                start_quarter = df_sorted['NƒÉm_K·ª≥'].iloc[0]
                                                start_val = df_sorted[col].iloc[0]
                                                if start_val != 0:
                                                    quarters = df_sorted['NƒÉm_K·ª≥']
                                                    cagr_values = []
                                                    for idx, (q, val) in enumerate(zip(quarters, df_sorted[col])):
                                                        period = idx / 4.0  # M·ªói qu√Ω l√† 1/4 nƒÉm
                                                        if period == 0:
                                                            cagr_values.append(None)
                                                        else:
                                                            cagr_val = (val / start_val)**(1/period) - 1
                                                            cagr_values.append(cagr_val * 100)
                                                    fig_cagr = go.Figure()
                                                    fig_cagr.add_trace(go.Scatter(
                                                        x=quarters,
                                                        y=cagr_values,
                                                        mode='lines+markers',
                                                        name='CAGR',
                                                        marker_color='red',
                                                        hovertemplate="CAGR: %{y:.2f}%<br>Qu√Ω: %{x}"
                                                    ))
                                                    fig_cagr.update_layout(
                                                        title=f"CAGR c·ªßa {col} - {symbol}",
                                                        xaxis_title="Qu√Ω",
                                                        yaxis_title="CAGR (%)",
                                                        template="plotly_white",
                                                        height=300,
                                                        margin=dict(l=20, r=20, t=150, b=20)
                                                    )
                                                    st.plotly_chart(fig_cagr, use_container_width=True, config=config, key=f"ratios_quarter_{symbol}_{col}_cagr")
                                                else:
                                                    st.info("Gi√° tr·ªã ban ƒë·∫ßu b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh CAGR.")
                                            else:
                                                st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh CAGR.")
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c·ªôt 'Meta_NƒÉm'/'Meta_K·ª≥' cho ch·ªâ s·ªë t√†i ch√≠nh h√†ng qu√Ω c·ªßa {symbol}")


####Tab 8: Ph√¢n t√≠ch k·ªπ thu·∫≠t
with tab8:
    st.header("Ph√¢n t√≠ch k·ªπ thu·∫≠t")

    # **Ch·ªçn m√£ c·ªï phi·∫øu**
    stock_symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: VCI)", value="VCI").upper()

    # **Ch·ªçn kho·∫£ng th·ªùi gian**
    start_date = st.date_input("Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu", value=datetime.datetime(2020, 1, 1))
    end_date = st.date_input("Ch·ªçn ng√†y k·∫øt th√∫c", value=datetime.datetime.now())

    # **L·∫•y d·ªØ li·ªáu t·ª´ vnstock**
    try:
        stock = Vnstock().stock(symbol=stock_symbol, source='VCI')
        stock_data = stock.quote.history(start=start_date.strftime('%Y-%m-%d'),
                                         end=end_date.strftime('%Y-%m-%d'))
        if stock_data.empty:
            st.error(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ {stock_symbol} trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
            st.stop()
        stock_data['time'] = pd.to_datetime(stock_data['time'])
        stock_data = stock_data.sort_values('time')
        st.success(f"ƒê√£ t·∫£i d·ªØ li·ªáu cho m√£ {stock_symbol} t·ª´ {start_date} ƒë·∫øn {end_date}.")
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        st.stop()

    # **Ch·ªçn ch·ªâ b√°o k·ªπ thu·∫≠t**
    indicators = st.multiselect(
        "Ch·ªçn ch·ªâ b√°o k·ªπ thu·∫≠t",
        [
            "SMA (ƒê∆∞·ªùng trung b√¨nh ƒë·ªông ƒë∆°n gi·∫£n)", 
            "EMA (ƒê∆∞·ªùng trung b√¨nh ƒë·ªông h√†m m≈©)", 
            "RSI (Ch·ªâ s·ªë s·ª©c m·∫°nh t∆∞∆°ng ƒë·ªëi)", 
            "MACD", 
            "Bollinger Bands",
            "Stochastic Oscillator",
            "CCI (Commodity Channel Index)",
            "ADX (Average Directional Index)",
            "DMI"
        ]
    )

    # Nh·∫≠p kho·∫£ng th·ªùi gian cho c√°c ch·ªâ b√°o n·∫øu ƒë∆∞·ª£c ch·ªçn
    if "SMA (ƒê∆∞·ªùng trung b√¨nh ƒë·ªông ƒë∆°n gi·∫£n)" in indicators:
        sma_period = st.number_input("Ch·ªçn kho·∫£ng th·ªùi gian cho SMA", min_value=1, max_value=200, value=50)
    if "EMA (ƒê∆∞·ªùng trung b√¨nh ƒë·ªông h√†m m≈©)" in indicators:
        ema_period = st.number_input("Ch·ªçn kho·∫£ng th·ªùi gian cho EMA", min_value=1, max_value=200, value=50)
    if "RSI (Ch·ªâ s·ªë s·ª©c m·∫°nh t∆∞∆°ng ƒë·ªëi)" in indicators:
        rsi_period = st.number_input("Ch·ªçn kho·∫£ng th·ªùi gian cho RSI", min_value=1, max_value=100, value=14)
    if "Bollinger Bands" in indicators:
        bb_period = st.number_input("Ch·ªçn kho·∫£ng th·ªùi gian cho Bollinger Bands", min_value=1, max_value=200, value=20)
    if "Stochastic Oscillator" in indicators:
        stoch_period = st.number_input("Ch·ªçn kho·∫£ng th·ªùi gian cho Stochastic Oscillator", min_value=1, max_value=100, value=14)
    if "CCI (Commodity Channel Index)" in indicators:
        cci_period = st.number_input("Ch·ªçn kho·∫£ng th·ªùi gian cho CCI", min_value=1, max_value=200, value=20)
    if "ADX (Average Directional Index)" in indicators:
        adx_period = st.number_input("Ch·ªçn kho·∫£ng th·ªùi gian cho ADX", min_value=1, max_value=100, value=14)
    if "DMI" in indicators:
        dmi_period = st.number_input("Ch·ªçn kho·∫£ng th·ªùi gian cho DMI", min_value=1, max_value=100, value=14)

    # H√†m t√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
    def compute_indicators():
        global stock_data
        if "SMA (ƒê∆∞·ªùng trung b√¨nh ƒë·ªông ƒë∆°n gi·∫£n)" in indicators:
            stock_data['SMA'] = stock_data['close'].rolling(window=sma_period).mean()
        if "EMA (ƒê∆∞·ªùng trung b√¨nh ƒë·ªông h√†m m≈©)" in indicators:
            stock_data['EMA'] = stock_data['close'].ewm(span=ema_period, adjust=False).mean()
        if "RSI (Ch·ªâ s·ªë s·ª©c m·∫°nh t∆∞∆°ng ƒë·ªëi)" in indicators:
            delta = stock_data['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=rsi_period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=rsi_period).mean()
            rs = gain / loss
            stock_data['RSI'] = 100 - (100 / (1 + rs))
        if "MACD" in indicators:
            stock_data['EMA12'] = stock_data['close'].ewm(span=12, adjust=False).mean()
            stock_data['EMA26'] = stock_data['close'].ewm(span=26, adjust=False).mean()
            stock_data['MACD'] = stock_data['EMA12'] - stock_data['EMA26']
            stock_data['Signal_Line'] = stock_data['MACD'].ewm(span=9, adjust=False).mean()
        if "Bollinger Bands" in indicators:
            stock_data['Middle_Band'] = stock_data['close'].rolling(window=bb_period).mean()
            stock_data['Upper_Band'] = stock_data['Middle_Band'] + 2 * stock_data['close'].rolling(window=bb_period).std()
            stock_data['Lower_Band'] = stock_data['Middle_Band'] - 2 * stock_data['close'].rolling(window=bb_period).std()
        if "Stochastic Oscillator" in indicators:
            low_min = stock_data['low'].rolling(window=stoch_period).min()
            high_max = stock_data['high'].rolling(window=stoch_period).max()
            stock_data['%K'] = (stock_data['close'] - low_min) / (high_max - low_min) * 100
            stock_data['%D'] = stock_data['%K'].rolling(window=3).mean()
        if "CCI (Commodity Channel Index)" in indicators:
            tp = (stock_data['high'] + stock_data['low'] + stock_data['close']) / 3
            sma_tp = tp.rolling(window=cci_period).mean()
            mad = tp.rolling(window=cci_period).apply(lambda x: np.fabs(x - x.mean()).mean())
            stock_data['CCI'] = (tp - sma_tp) / (0.015 * mad)
        if "ADX (Average Directional Index)" in indicators:
            high = stock_data['high']
            low = stock_data['low']
            close = stock_data['close']
            tr1 = high - low
            tr2 = (high - close.shift()).abs()
            tr3 = (low - close.shift()).abs()
            true_range = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
            atr = true_range.rolling(window=adx_period).mean()
            up_move = high - high.shift()
            down_move = low.shift() - low
            plus_dm = np.where((up_move > down_move) & (up_move > 0), up_move, 0.0)
            minus_dm = np.where((down_move > up_move) & (down_move > 0), down_move, 0.0)
            plus_di = 100 * (pd.Series(plus_dm).rolling(window=adx_period).sum() / atr)
            minus_di = 100 * (pd.Series(minus_dm).rolling(window=adx_period).sum() / atr)
            dx = 100 * abs(plus_di - minus_di) / (plus_di + minus_di)
            stock_data['ADX'] = dx.rolling(window=adx_period).mean()
        if "DMI" in indicators:
            high = stock_data['high']
            low = stock_data['low']
            close = stock_data['close']
            up_move = high.diff()
            down_move = -low.diff()
            plus_dm = np.where((up_move > down_move) & (up_move > 0), up_move, 0)
            minus_dm = np.where((down_move > up_move) & (down_move > 0), down_move, 0)
            tr1 = high - low
            tr2 = (high - close.shift()).abs()
            tr3 = (low - close.shift()).abs()
            true_range = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
            atr = true_range.rolling(window=dmi_period).mean()
            plus_di = 100 * (pd.Series(plus_dm).rolling(window=dmi_period).sum() / atr)
            minus_di = 100 * (pd.Series(minus_dm).rolling(window=dmi_period).sum() / atr)
            stock_data['+DI'] = plus_di
            stock_data['-DI'] = minus_di

    # Ch·∫°y t√≠nh to√°n ch·ªâ b√°o trong m·ªôt ti·∫øn tr√¨nh ri√™ng
    indicator_thread = threading.Thread(target=compute_indicators)
    indicator_thread.start()
    indicator_thread.join()  # Ch·ªù ti·∫øn tr√¨nh t√≠nh to√°n ho√†n th√†nh

    # **T·∫°o bi·ªÉu ƒë·ªì v·ªõi kh·ªëi l∆∞·ª£ng c√≥ tr·ª•c Y ph·ª•**
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.1, 
                        row_heights=[0.7, 0.3], specs=[[{"secondary_y": True}], [{}]])

    # **Th√™m bi·ªÉu ƒë·ªì n·∫øn v√†o h√†ng tr√™n (tr·ª•c Y ch√≠nh)**
    fig.add_trace(go.Candlestick(
        x=stock_data['time'],
        open=stock_data['open'],
        high=stock_data['high'],
        low=stock_data['low'],
        close=stock_data['close'],
        name="N·∫øn"
    ), row=1, col=1, secondary_y=False)

    # **Th√™m kh·ªëi l∆∞·ª£ng giao d·ªãch v√†o tr·ª•c Y ph·ª•**
    fig.add_trace(go.Bar(
        x=stock_data['time'],
        y=stock_data['volume'],
        name="Kh·ªëi l∆∞·ª£ng",
        marker_color='blue',
        opacity=0.4
    ), row=1, col=1, secondary_y=True)

    # **Th√™m c√°c ch·ªâ b√°o k·ªπ thu·∫≠t v√†o bi·ªÉu ƒë·ªì h√†ng tr√™n**
    if "SMA (ƒê∆∞·ªùng trung b√¨nh ƒë·ªông ƒë∆°n gi·∫£n)" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['SMA'], 
                                 name=f"SMA {sma_period}", line=dict(color='orange')),
                      row=1, col=1, secondary_y=False)
    if "EMA (ƒê∆∞·ªùng trung b√¨nh ƒë·ªông h√†m m≈©)" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['EMA'], 
                                 name=f"EMA {ema_period}", line=dict(color='green')),
                      row=1, col=1, secondary_y=False)
    if "Bollinger Bands" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['Upper_Band'], 
                                 name="Upper Band", line=dict(color='red')),
                      row=1, col=1, secondary_y=False)
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['Middle_Band'], 
                                 name="Middle Band", line=dict(color='purple')),
                      row=1, col=1, secondary_y=False)
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['Lower_Band'], 
                                 name="Lower Band", line=dict(color='red')),
                      row=1, col=1, secondary_y=False)

    # **Th√™m c√°c ch·ªâ b√°o k·ªπ thu·∫≠t v√†o h√†ng d∆∞·ªõi**
    if "RSI (Ch·ªâ s·ªë s·ª©c m·∫°nh t∆∞∆°ng ƒë·ªëi)" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['RSI'], 
                                 name="RSI", line=dict(color='purple')),
                      row=2, col=1)
        fig.add_hline(y=70, line_dash="dash", line_color="red", row=2, col=1)
        fig.add_hline(y=30, line_dash="dash", line_color="green", row=2, col=1)
    if "MACD" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['MACD'], 
                                 name="MACD", line=dict(color='blue')),
                      row=2, col=1)
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['Signal_Line'], 
                                 name="Signal Line", line=dict(color='red')),
                      row=2, col=1)
    if "Stochastic Oscillator" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['%K'], 
                                 name="Stochastic %K", line=dict(color='blue')),
                      row=2, col=1)
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['%D'], 
                                 name="Stochastic %D", line=dict(color='orange')),
                      row=2, col=1)
    if "CCI (Commodity Channel Index)" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['CCI'], 
                                 name="CCI", line=dict(color='brown')),
                      row=2, col=1)
        fig.add_hline(y=100, line_dash="dash", line_color="green", row=2, col=1)
        fig.add_hline(y=-100, line_dash="dash", line_color="green", row=2, col=1)
    if "ADX (Average Directional Index)" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['ADX'], 
                                 name="ADX", line=dict(color='magenta')),
                      row=2, col=1)
        fig.add_hline(y=25, line_dash="dash", line_color="gray", row=2, col=1)
    if "DMI" in indicators:
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['+DI'], 
                                 name="+DI", line=dict(color='blue')),
                      row=2, col=1)
        fig.add_trace(go.Scatter(x=stock_data['time'], y=stock_data['-DI'], 
                                 name="-DI", line=dict(color='red')),
                      row=2, col=1)

    # **C·∫≠p nh·∫≠t giao di·ªán**
    fig.update_layout(
        title=f"Ph√¢n t√≠ch k·ªπ thu·∫≠t cho {stock_symbol} t·ª´ {start_date} ƒë·∫øn {end_date}",
        height=800,
        showlegend=True,
        xaxis_title="Th·ªùi gian",
        yaxis_title="Gi√°",
        yaxis2=dict(title="Kh·ªëi l∆∞·ª£ng", overlaying="y", side="right"),
        template="plotly_white",
        xaxis_rangeslider_visible=False
    )

    # **Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì**
    st.plotly_chart(fig, use_container_width=True)
###########################################
# Tab 9: B·∫£ng gi√° giao d·ªãch
###########################################
with tab9:
    st.header("B·∫£ng gi√° giao d·ªãch")
    if 'symbols' not in st.session_state:
        st.error("Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu ·ªü tab 'T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu' tr∆∞·ªõc.")
    else:
        symbols = st.session_state['symbols']
        try:
            # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng stock d·ª±a tr√™n m√£ ƒë·∫ßu ti√™n trong danh s√°ch v√† source 'VCI'
            stock_obj = Vnstock().stock(symbol=symbols[0], source='VCI')
            # G·ªçi ph∆∞∆°ng th·ª©c price_board v·ªõi danh s√°ch c√°c m√£ t·ª´ Tab 1
            price_board = stock_obj.trading.price_board(symbols)
            if isinstance(price_board, pd.DataFrame):
                st.dataframe(price_board)
            else:
                st.write(price_board)
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i b·∫£ng gi√° giao d·ªãch: {e}")
